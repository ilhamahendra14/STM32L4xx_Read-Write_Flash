
STM32L4xx_Read-Write_Flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d6c  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08002ef8  08002ef8  00012ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f44  08002f44  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  08002f44  08002f44  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f44  08002f44  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f44  08002f44  00012f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f48  08002f48  00012f48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08002f4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  20000090  08002fdc  00020090  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000118  08002fdc  00020118  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ab93  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000222b  00000000  00000000  0002ac53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae0  00000000  00000000  0002ce80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009c8  00000000  00000000  0002d960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020898  00000000  00000000  0002e328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c1cc  00000000  00000000  0004ebc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c27ab  00000000  00000000  0005ad8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011d537  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c30  00000000  00000000  0011d588  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000090 	.word	0x20000090
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08002ee0 	.word	0x08002ee0

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000094 	.word	0x20000094
 80001c8:	08002ee0 	.word	0x08002ee0

080001cc <strlen>:
 80001cc:	4603      	mov	r3, r0
 80001ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d2:	2a00      	cmp	r2, #0
 80001d4:	d1fb      	bne.n	80001ce <strlen+0x2>
 80001d6:	1a18      	subs	r0, r3, r0
 80001d8:	3801      	subs	r0, #1
 80001da:	4770      	bx	lr

080001dc <Write_Data>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Write_Data(uint64_t StartPageAddress, uint32_t pageS, uint8_t *data, int lenData) {
 80001dc:	b5b0      	push	{r4, r5, r7, lr}
 80001de:	b088      	sub	sp, #32
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80001e6:	607a      	str	r2, [r7, #4]
 80001e8:	603b      	str	r3, [r7, #0]
	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PAGEError;
	HAL_FLASH_Unlock();
 80001ea:	f000 fdc5 	bl	8000d78 <HAL_FLASH_Unlock>
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 80001ee:	4b2a      	ldr	r3, [pc, #168]	; (8000298 <Write_Data+0xbc>)
 80001f0:	2200      	movs	r2, #0
 80001f2:	601a      	str	r2, [r3, #0]
	EraseInitStruct.Page = pageS;
 80001f4:	4a28      	ldr	r2, [pc, #160]	; (8000298 <Write_Data+0xbc>)
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	6093      	str	r3, [r2, #8]
	EraseInitStruct.NbPages = 1;
 80001fa:	4b27      	ldr	r3, [pc, #156]	; (8000298 <Write_Data+0xbc>)
 80001fc:	2201      	movs	r2, #1
 80001fe:	60da      	str	r2, [r3, #12]
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 8000200:	f107 0310 	add.w	r3, r7, #16
 8000204:	4619      	mov	r1, r3
 8000206:	4824      	ldr	r0, [pc, #144]	; (8000298 <Write_Data+0xbc>)
 8000208:	f000 fe9c 	bl	8000f44 <HAL_FLASHEx_Erase>
 800020c:	4603      	mov	r3, r0
 800020e:	2b00      	cmp	r3, #0
 8000210:	d13b      	bne.n	800028a <Write_Data+0xae>
		return;
	char *dataS = malloc(8);
 8000212:	2008      	movs	r0, #8
 8000214:	f002 fda2 	bl	8002d5c <malloc>
 8000218:	4603      	mov	r3, r0
 800021a:	617b      	str	r3, [r7, #20]
	int xx = 0;
 800021c:	2300      	movs	r3, #0
 800021e:	61fb      	str	r3, [r7, #28]
	int xy = xx+8;
 8000220:	69fb      	ldr	r3, [r7, #28]
 8000222:	3308      	adds	r3, #8
 8000224:	61bb      	str	r3, [r7, #24]
	if (xy>lenData)
 8000226:	69ba      	ldr	r2, [r7, #24]
 8000228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800022a:	429a      	cmp	r2, r3
 800022c:	dd26      	ble.n	800027c <Write_Data+0xa0>
		xy = lenData;
 800022e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000230:	61bb      	str	r3, [r7, #24]
	while (xx < lenData) {
 8000232:	e023      	b.n	800027c <Write_Data+0xa0>
		slice(data, dataS, xx, xy);
 8000234:	69fa      	ldr	r2, [r7, #28]
 8000236:	69bb      	ldr	r3, [r7, #24]
 8000238:	6979      	ldr	r1, [r7, #20]
 800023a:	6838      	ldr	r0, [r7, #0]
 800023c:	f000 f88e 	bl	800035c <slice>
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, StartPageAddress, *(uint64_t*) dataS) == HAL_OK) {
 8000240:	68b9      	ldr	r1, [r7, #8]
 8000242:	697b      	ldr	r3, [r7, #20]
 8000244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000248:	2000      	movs	r0, #0
 800024a:	f000 fd29 	bl	8000ca0 <HAL_FLASH_Program>
 800024e:	4603      	mov	r3, r0
 8000250:	2b00      	cmp	r3, #0
 8000252:	d11c      	bne.n	800028e <Write_Data+0xb2>
			StartPageAddress += 8; // use StartPageAddress += 2 for half word and 8 for double word
 8000254:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000258:	f112 0408 	adds.w	r4, r2, #8
 800025c:	f143 0500 	adc.w	r5, r3, #0
 8000260:	e9c7 4502 	strd	r4, r5, [r7, #8]
			xx += 8;
 8000264:	69fb      	ldr	r3, [r7, #28]
 8000266:	3308      	adds	r3, #8
 8000268:	61fb      	str	r3, [r7, #28]
			xy = xx + 8;
 800026a:	69fb      	ldr	r3, [r7, #28]
 800026c:	3308      	adds	r3, #8
 800026e:	61bb      	str	r3, [r7, #24]
			if (xy>lenData)
 8000270:	69ba      	ldr	r2, [r7, #24]
 8000272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000274:	429a      	cmp	r2, r3
 8000276:	dd01      	ble.n	800027c <Write_Data+0xa0>
				xy = lenData;
 8000278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800027a:	61bb      	str	r3, [r7, #24]
	while (xx < lenData) {
 800027c:	69fa      	ldr	r2, [r7, #28]
 800027e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000280:	429a      	cmp	r2, r3
 8000282:	dbd7      	blt.n	8000234 <Write_Data+0x58>
		} else
			return;
	}
	HAL_FLASH_Lock();
 8000284:	f000 fd9a 	bl	8000dbc <HAL_FLASH_Lock>
 8000288:	e002      	b.n	8000290 <Write_Data+0xb4>
		return;
 800028a:	bf00      	nop
 800028c:	e000      	b.n	8000290 <Write_Data+0xb4>
			return;
 800028e:	bf00      	nop
}
 8000290:	3720      	adds	r7, #32
 8000292:	46bd      	mov	sp, r7
 8000294:	bdb0      	pop	{r4, r5, r7, pc}
 8000296:	bf00      	nop
 8000298:	200000f0 	.word	0x200000f0

0800029c <Read_Data>:

void Read_Data(uint64_t StartPageAddress, uint64_t *RxBuf, uint16_t numberofwords) {
 800029c:	b4b0      	push	{r4, r5, r7}
 800029e:	b085      	sub	sp, #20
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80002a6:	607a      	str	r2, [r7, #4]
 80002a8:	807b      	strh	r3, [r7, #2]
	while (1) {
		*RxBuf = *(__IO uint64_t*) StartPageAddress;
 80002aa:	68bb      	ldr	r3, [r7, #8]
 80002ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80002b0:	6879      	ldr	r1, [r7, #4]
 80002b2:	e9c1 2300 	strd	r2, r3, [r1]
		StartPageAddress += 8;
 80002b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80002ba:	f112 0408 	adds.w	r4, r2, #8
 80002be:	f143 0500 	adc.w	r5, r3, #0
 80002c2:	e9c7 4502 	strd	r4, r5, [r7, #8]
		RxBuf++;
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	3308      	adds	r3, #8
 80002ca:	607b      	str	r3, [r7, #4]
		if (!(numberofwords--))
 80002cc:	887b      	ldrh	r3, [r7, #2]
 80002ce:	1e5a      	subs	r2, r3, #1
 80002d0:	807a      	strh	r2, [r7, #2]
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d000      	beq.n	80002d8 <Read_Data+0x3c>
		*RxBuf = *(__IO uint64_t*) StartPageAddress;
 80002d6:	e7e8      	b.n	80002aa <Read_Data+0xe>
			break;
 80002d8:	bf00      	nop
	}
}
 80002da:	bf00      	nop
 80002dc:	3714      	adds	r7, #20
 80002de:	46bd      	mov	sp, r7
 80002e0:	bcb0      	pop	{r4, r5, r7}
 80002e2:	4770      	bx	lr

080002e4 <Convert_Str>:

void Convert_Str(uint8_t* string) {
 80002e4:	b4f0      	push	{r4, r5, r6, r7}
 80002e6:	b084      	sub	sp, #16
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < sizeof(Rx_Data); i++)
 80002ec:	2100      	movs	r1, #0
 80002ee:	60f9      	str	r1, [r7, #12]
 80002f0:	e028      	b.n	8000344 <Convert_Str+0x60>
		string[i] = Rx_Data[i / 8] >> (8 * (i % 8));
 80002f2:	68f9      	ldr	r1, [r7, #12]
 80002f4:	2900      	cmp	r1, #0
 80002f6:	da00      	bge.n	80002fa <Convert_Str+0x16>
 80002f8:	3107      	adds	r1, #7
 80002fa:	10c9      	asrs	r1, r1, #3
 80002fc:	4816      	ldr	r0, [pc, #88]	; (8000358 <Convert_Str+0x74>)
 80002fe:	00c9      	lsls	r1, r1, #3
 8000300:	4401      	add	r1, r0
 8000302:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000306:	68fc      	ldr	r4, [r7, #12]
 8000308:	4265      	negs	r5, r4
 800030a:	f004 0407 	and.w	r4, r4, #7
 800030e:	f005 0507 	and.w	r5, r5, #7
 8000312:	bf58      	it	pl
 8000314:	426c      	negpl	r4, r5
 8000316:	00e4      	lsls	r4, r4, #3
 8000318:	f1c4 0620 	rsb	r6, r4, #32
 800031c:	f1a4 0520 	sub.w	r5, r4, #32
 8000320:	fa20 f204 	lsr.w	r2, r0, r4
 8000324:	fa01 f606 	lsl.w	r6, r1, r6
 8000328:	4332      	orrs	r2, r6
 800032a:	fa21 f505 	lsr.w	r5, r1, r5
 800032e:	432a      	orrs	r2, r5
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	68f9      	ldr	r1, [r7, #12]
 8000336:	6878      	ldr	r0, [r7, #4]
 8000338:	4401      	add	r1, r0
 800033a:	b2d0      	uxtb	r0, r2
 800033c:	7008      	strb	r0, [r1, #0]
	for (int i = 0; i < sizeof(Rx_Data); i++)
 800033e:	68f9      	ldr	r1, [r7, #12]
 8000340:	3101      	adds	r1, #1
 8000342:	60f9      	str	r1, [r7, #12]
 8000344:	68f9      	ldr	r1, [r7, #12]
 8000346:	290f      	cmp	r1, #15
 8000348:	d9d3      	bls.n	80002f2 <Convert_Str+0xe>
}
 800034a:	bf00      	nop
 800034c:	bf00      	nop
 800034e:	3710      	adds	r7, #16
 8000350:	46bd      	mov	sp, r7
 8000352:	bcf0      	pop	{r4, r5, r6, r7}
 8000354:	4770      	bx	lr
 8000356:	bf00      	nop
 8000358:	200000e0 	.word	0x200000e0

0800035c <slice>:

void slice(uint8_t *str, char *buffer, size_t start, size_t end) {
 800035c:	b480      	push	{r7}
 800035e:	b089      	sub	sp, #36	; 0x24
 8000360:	af00      	add	r7, sp, #0
 8000362:	60f8      	str	r0, [r7, #12]
 8000364:	60b9      	str	r1, [r7, #8]
 8000366:	607a      	str	r2, [r7, #4]
 8000368:	603b      	str	r3, [r7, #0]
	size_t j = 0;
 800036a:	2300      	movs	r3, #0
 800036c:	61fb      	str	r3, [r7, #28]
	if (end<(start+8)){
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	3308      	adds	r3, #8
 8000372:	683a      	ldr	r2, [r7, #0]
 8000374:	429a      	cmp	r2, r3
 8000376:	d226      	bcs.n	80003c6 <slice+0x6a>
		for (size_t i = start; i < end; ++i)
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	61bb      	str	r3, [r7, #24]
 800037c:	e00c      	b.n	8000398 <slice+0x3c>
			buffer[j++] = str[i];
 800037e:	68fa      	ldr	r2, [r7, #12]
 8000380:	69bb      	ldr	r3, [r7, #24]
 8000382:	441a      	add	r2, r3
 8000384:	69fb      	ldr	r3, [r7, #28]
 8000386:	1c59      	adds	r1, r3, #1
 8000388:	61f9      	str	r1, [r7, #28]
 800038a:	68b9      	ldr	r1, [r7, #8]
 800038c:	440b      	add	r3, r1
 800038e:	7812      	ldrb	r2, [r2, #0]
 8000390:	701a      	strb	r2, [r3, #0]
		for (size_t i = start; i < end; ++i)
 8000392:	69bb      	ldr	r3, [r7, #24]
 8000394:	3301      	adds	r3, #1
 8000396:	61bb      	str	r3, [r7, #24]
 8000398:	69ba      	ldr	r2, [r7, #24]
 800039a:	683b      	ldr	r3, [r7, #0]
 800039c:	429a      	cmp	r2, r3
 800039e:	d3ee      	bcc.n	800037e <slice+0x22>
		for (size_t i = (end-start); i < 8; ++i)
 80003a0:	683a      	ldr	r2, [r7, #0]
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	1ad3      	subs	r3, r2, r3
 80003a6:	617b      	str	r3, [r7, #20]
 80003a8:	e009      	b.n	80003be <slice+0x62>
			buffer[j++] = 0xff;
 80003aa:	69fb      	ldr	r3, [r7, #28]
 80003ac:	1c5a      	adds	r2, r3, #1
 80003ae:	61fa      	str	r2, [r7, #28]
 80003b0:	68ba      	ldr	r2, [r7, #8]
 80003b2:	4413      	add	r3, r2
 80003b4:	22ff      	movs	r2, #255	; 0xff
 80003b6:	701a      	strb	r2, [r3, #0]
		for (size_t i = (end-start); i < 8; ++i)
 80003b8:	697b      	ldr	r3, [r7, #20]
 80003ba:	3301      	adds	r3, #1
 80003bc:	617b      	str	r3, [r7, #20]
 80003be:	697b      	ldr	r3, [r7, #20]
 80003c0:	2b07      	cmp	r3, #7
 80003c2:	d9f2      	bls.n	80003aa <slice+0x4e>
 80003c4:	e013      	b.n	80003ee <slice+0x92>
	}
	else{
		for (size_t i = start; i <= end; ++i)
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	613b      	str	r3, [r7, #16]
 80003ca:	e00c      	b.n	80003e6 <slice+0x8a>
			buffer[j++] = str[i];
 80003cc:	68fa      	ldr	r2, [r7, #12]
 80003ce:	693b      	ldr	r3, [r7, #16]
 80003d0:	441a      	add	r2, r3
 80003d2:	69fb      	ldr	r3, [r7, #28]
 80003d4:	1c59      	adds	r1, r3, #1
 80003d6:	61f9      	str	r1, [r7, #28]
 80003d8:	68b9      	ldr	r1, [r7, #8]
 80003da:	440b      	add	r3, r1
 80003dc:	7812      	ldrb	r2, [r2, #0]
 80003de:	701a      	strb	r2, [r3, #0]
		for (size_t i = start; i <= end; ++i)
 80003e0:	693b      	ldr	r3, [r7, #16]
 80003e2:	3301      	adds	r3, #1
 80003e4:	613b      	str	r3, [r7, #16]
 80003e6:	693a      	ldr	r2, [r7, #16]
 80003e8:	683b      	ldr	r3, [r7, #0]
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d9ee      	bls.n	80003cc <slice+0x70>
	}
	buffer[j] = 0;
 80003ee:	68ba      	ldr	r2, [r7, #8]
 80003f0:	69fb      	ldr	r3, [r7, #28]
 80003f2:	4413      	add	r3, r2
 80003f4:	2200      	movs	r2, #0
 80003f6:	701a      	strb	r2, [r3, #0]
}
 80003f8:	bf00      	nop
 80003fa:	3724      	adds	r7, #36	; 0x24
 80003fc:	46bd      	mov	sp, r7
 80003fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000402:	4770      	bx	lr

08000404 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b09e      	sub	sp, #120	; 0x78
 8000408:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800040a:	f000 fa9e 	bl	800094a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800040e:	f000 f835 	bl	800047c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000412:	f000 f903 	bl	800061c <MX_GPIO_Init>
  MX_RNG_Init();
 8000416:	f000 f891 	bl	800053c <MX_RNG_Init>
  MX_RTC_Init();
 800041a:	f000 f8a3 	bl	8000564 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  char *data = "Hello World";
 800041e:	4b14      	ldr	r3, [pc, #80]	; (8000470 <main+0x6c>)
 8000420:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint8_t dataString[100];
  uint16_t xRead = 2;
 8000422:	2302      	movs	r3, #2
 8000424:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  memset(dataString, 0xff, 100);
 8000428:	1d3b      	adds	r3, r7, #4
 800042a:	2264      	movs	r2, #100	; 0x64
 800042c:	21ff      	movs	r1, #255	; 0xff
 800042e:	4618      	mov	r0, r3
 8000430:	f002 fc9c 	bl	8002d6c <memset>
	  Write_Data(0x08030000, 96, (uint8_t*)data, strlen(data));
 8000434:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8000436:	f7ff fec9 	bl	80001cc <strlen>
 800043a:	4603      	mov	r3, r0
 800043c:	9300      	str	r3, [sp, #0]
 800043e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000440:	2260      	movs	r2, #96	; 0x60
 8000442:	480c      	ldr	r0, [pc, #48]	; (8000474 <main+0x70>)
 8000444:	f04f 0100 	mov.w	r1, #0
 8000448:	f7ff fec8 	bl	80001dc <Write_Data>
	  Read_Data(0x08030000, Rx_Data, xRead);
 800044c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8000450:	4a09      	ldr	r2, [pc, #36]	; (8000478 <main+0x74>)
 8000452:	4808      	ldr	r0, [pc, #32]	; (8000474 <main+0x70>)
 8000454:	f04f 0100 	mov.w	r1, #0
 8000458:	f7ff ff20 	bl	800029c <Read_Data>
	  Convert_Str(dataString);
 800045c:	1d3b      	adds	r3, r7, #4
 800045e:	4618      	mov	r0, r3
 8000460:	f7ff ff40 	bl	80002e4 <Convert_Str>
	  HAL_Delay(1000);
 8000464:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000468:	f000 fae4 	bl	8000a34 <HAL_Delay>
	  memset(dataString, 0xff, 100);
 800046c:	e7dc      	b.n	8000428 <main+0x24>
 800046e:	bf00      	nop
 8000470:	08002ef8 	.word	0x08002ef8
 8000474:	08030000 	.word	0x08030000
 8000478:	200000e0 	.word	0x200000e0

0800047c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b096      	sub	sp, #88	; 0x58
 8000480:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000482:	f107 0314 	add.w	r3, r7, #20
 8000486:	2244      	movs	r2, #68	; 0x44
 8000488:	2100      	movs	r1, #0
 800048a:	4618      	mov	r0, r3
 800048c:	f002 fc6e 	bl	8002d6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000490:	463b      	mov	r3, r7
 8000492:	2200      	movs	r2, #0
 8000494:	601a      	str	r2, [r3, #0]
 8000496:	605a      	str	r2, [r3, #4]
 8000498:	609a      	str	r2, [r3, #8]
 800049a:	60da      	str	r2, [r3, #12]
 800049c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800049e:	f44f 7000 	mov.w	r0, #512	; 0x200
 80004a2:	f001 f815 	bl	80014d0 <HAL_PWREx_ControlVoltageScaling>
 80004a6:	4603      	mov	r3, r0
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d001      	beq.n	80004b0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80004ac:	f000 f902 	bl	80006b4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80004b0:	f000 fff0 	bl	8001494 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80004b4:	4b20      	ldr	r3, [pc, #128]	; (8000538 <SystemClock_Config+0xbc>)
 80004b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80004ba:	4a1f      	ldr	r2, [pc, #124]	; (8000538 <SystemClock_Config+0xbc>)
 80004bc:	f023 0318 	bic.w	r3, r3, #24
 80004c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80004c4:	2306      	movs	r3, #6
 80004c6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80004c8:	2301      	movs	r3, #1
 80004ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004d0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004d2:	2310      	movs	r3, #16
 80004d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004d6:	2302      	movs	r3, #2
 80004d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004da:	2302      	movs	r3, #2
 80004dc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80004de:	2301      	movs	r3, #1
 80004e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80004e2:	230a      	movs	r3, #10
 80004e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80004e6:	2307      	movs	r3, #7
 80004e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80004ea:	2302      	movs	r3, #2
 80004ec:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80004ee:	2302      	movs	r3, #2
 80004f0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004f2:	f107 0314 	add.w	r3, r7, #20
 80004f6:	4618      	mov	r0, r3
 80004f8:	f001 f840 	bl	800157c <HAL_RCC_OscConfig>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d001      	beq.n	8000506 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000502:	f000 f8d7 	bl	80006b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000506:	230f      	movs	r3, #15
 8000508:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800050a:	2303      	movs	r3, #3
 800050c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800050e:	2300      	movs	r3, #0
 8000510:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000512:	2300      	movs	r3, #0
 8000514:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000516:	2300      	movs	r3, #0
 8000518:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800051a:	463b      	mov	r3, r7
 800051c:	2104      	movs	r1, #4
 800051e:	4618      	mov	r0, r3
 8000520:	f001 fc40 	bl	8001da4 <HAL_RCC_ClockConfig>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800052a:	f000 f8c3 	bl	80006b4 <Error_Handler>
  }
}
 800052e:	bf00      	nop
 8000530:	3758      	adds	r7, #88	; 0x58
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	40021000 	.word	0x40021000

0800053c <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000540:	4b06      	ldr	r3, [pc, #24]	; (800055c <MX_RNG_Init+0x20>)
 8000542:	4a07      	ldr	r2, [pc, #28]	; (8000560 <MX_RNG_Init+0x24>)
 8000544:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000546:	4805      	ldr	r0, [pc, #20]	; (800055c <MX_RNG_Init+0x20>)
 8000548:	f002 f900 	bl	800274c <HAL_RNG_Init>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8000552:	f000 f8af 	bl	80006b4 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000556:	bf00      	nop
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	200000ac 	.word	0x200000ac
 8000560:	50060800 	.word	0x50060800

08000564 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b086      	sub	sp, #24
 8000568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800056a:	1d3b      	adds	r3, r7, #4
 800056c:	2200      	movs	r2, #0
 800056e:	601a      	str	r2, [r3, #0]
 8000570:	605a      	str	r2, [r3, #4]
 8000572:	609a      	str	r2, [r3, #8]
 8000574:	60da      	str	r2, [r3, #12]
 8000576:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000578:	2300      	movs	r3, #0
 800057a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800057c:	4b25      	ldr	r3, [pc, #148]	; (8000614 <MX_RTC_Init+0xb0>)
 800057e:	4a26      	ldr	r2, [pc, #152]	; (8000618 <MX_RTC_Init+0xb4>)
 8000580:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000582:	4b24      	ldr	r3, [pc, #144]	; (8000614 <MX_RTC_Init+0xb0>)
 8000584:	2200      	movs	r2, #0
 8000586:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000588:	4b22      	ldr	r3, [pc, #136]	; (8000614 <MX_RTC_Init+0xb0>)
 800058a:	227f      	movs	r2, #127	; 0x7f
 800058c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800058e:	4b21      	ldr	r3, [pc, #132]	; (8000614 <MX_RTC_Init+0xb0>)
 8000590:	22ff      	movs	r2, #255	; 0xff
 8000592:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000594:	4b1f      	ldr	r3, [pc, #124]	; (8000614 <MX_RTC_Init+0xb0>)
 8000596:	2200      	movs	r2, #0
 8000598:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800059a:	4b1e      	ldr	r3, [pc, #120]	; (8000614 <MX_RTC_Init+0xb0>)
 800059c:	2200      	movs	r2, #0
 800059e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80005a0:	4b1c      	ldr	r3, [pc, #112]	; (8000614 <MX_RTC_Init+0xb0>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80005a6:	4b1b      	ldr	r3, [pc, #108]	; (8000614 <MX_RTC_Init+0xb0>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80005ac:	4819      	ldr	r0, [pc, #100]	; (8000614 <MX_RTC_Init+0xb0>)
 80005ae:	f002 f924 	bl	80027fa <HAL_RTC_Init>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80005b8:	f000 f87c 	bl	80006b4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80005bc:	2300      	movs	r3, #0
 80005be:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80005c0:	2300      	movs	r3, #0
 80005c2:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80005c4:	2300      	movs	r3, #0
 80005c6:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80005c8:	2300      	movs	r3, #0
 80005ca:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80005cc:	2300      	movs	r3, #0
 80005ce:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80005d0:	1d3b      	adds	r3, r7, #4
 80005d2:	2201      	movs	r2, #1
 80005d4:	4619      	mov	r1, r3
 80005d6:	480f      	ldr	r0, [pc, #60]	; (8000614 <MX_RTC_Init+0xb0>)
 80005d8:	f002 f98a 	bl	80028f0 <HAL_RTC_SetTime>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80005e2:	f000 f867 	bl	80006b4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80005e6:	2301      	movs	r3, #1
 80005e8:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80005ea:	2301      	movs	r3, #1
 80005ec:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80005ee:	2301      	movs	r3, #1
 80005f0:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80005f2:	2300      	movs	r3, #0
 80005f4:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80005f6:	463b      	mov	r3, r7
 80005f8:	2201      	movs	r2, #1
 80005fa:	4619      	mov	r1, r3
 80005fc:	4805      	ldr	r0, [pc, #20]	; (8000614 <MX_RTC_Init+0xb0>)
 80005fe:	f002 fa14 	bl	8002a2a <HAL_RTC_SetDate>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8000608:	f000 f854 	bl	80006b4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800060c:	bf00      	nop
 800060e:	3718      	adds	r7, #24
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	200000bc 	.word	0x200000bc
 8000618:	40002800 	.word	0x40002800

0800061c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b088      	sub	sp, #32
 8000620:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000622:	f107 030c 	add.w	r3, r7, #12
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	605a      	str	r2, [r3, #4]
 800062c:	609a      	str	r2, [r3, #8]
 800062e:	60da      	str	r2, [r3, #12]
 8000630:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000632:	4b1f      	ldr	r3, [pc, #124]	; (80006b0 <MX_GPIO_Init+0x94>)
 8000634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000636:	4a1e      	ldr	r2, [pc, #120]	; (80006b0 <MX_GPIO_Init+0x94>)
 8000638:	f043 0304 	orr.w	r3, r3, #4
 800063c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800063e:	4b1c      	ldr	r3, [pc, #112]	; (80006b0 <MX_GPIO_Init+0x94>)
 8000640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000642:	f003 0304 	and.w	r3, r3, #4
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800064a:	4b19      	ldr	r3, [pc, #100]	; (80006b0 <MX_GPIO_Init+0x94>)
 800064c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800064e:	4a18      	ldr	r2, [pc, #96]	; (80006b0 <MX_GPIO_Init+0x94>)
 8000650:	f043 0301 	orr.w	r3, r3, #1
 8000654:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000656:	4b16      	ldr	r3, [pc, #88]	; (80006b0 <MX_GPIO_Init+0x94>)
 8000658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000662:	4b13      	ldr	r3, [pc, #76]	; (80006b0 <MX_GPIO_Init+0x94>)
 8000664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000666:	4a12      	ldr	r2, [pc, #72]	; (80006b0 <MX_GPIO_Init+0x94>)
 8000668:	f043 0302 	orr.w	r3, r3, #2
 800066c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800066e:	4b10      	ldr	r3, [pc, #64]	; (80006b0 <MX_GPIO_Init+0x94>)
 8000670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000672:	f003 0302 	and.w	r3, r3, #2
 8000676:	603b      	str	r3, [r7, #0]
 8000678:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 800067a:	2200      	movs	r2, #0
 800067c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000680:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000684:	f000 feee 	bl	8001464 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Buzzer_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 8000688:	f44f 7380 	mov.w	r3, #256	; 0x100
 800068c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800068e:	2301      	movs	r3, #1
 8000690:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000692:	2300      	movs	r3, #0
 8000694:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000696:	2300      	movs	r3, #0
 8000698:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 800069a:	f107 030c 	add.w	r3, r7, #12
 800069e:	4619      	mov	r1, r3
 80006a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006a4:	f000 fd74 	bl	8001190 <HAL_GPIO_Init>

}
 80006a8:	bf00      	nop
 80006aa:	3720      	adds	r7, #32
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	40021000 	.word	0x40021000

080006b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006b8:	b672      	cpsid	i
}
 80006ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006bc:	e7fe      	b.n	80006bc <Error_Handler+0x8>
	...

080006c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <HAL_MspInit+0x44>)
 80006c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006ca:	4a0e      	ldr	r2, [pc, #56]	; (8000704 <HAL_MspInit+0x44>)
 80006cc:	f043 0301 	orr.w	r3, r3, #1
 80006d0:	6613      	str	r3, [r2, #96]	; 0x60
 80006d2:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <HAL_MspInit+0x44>)
 80006d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006d6:	f003 0301 	and.w	r3, r3, #1
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006de:	4b09      	ldr	r3, [pc, #36]	; (8000704 <HAL_MspInit+0x44>)
 80006e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006e2:	4a08      	ldr	r2, [pc, #32]	; (8000704 <HAL_MspInit+0x44>)
 80006e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e8:	6593      	str	r3, [r2, #88]	; 0x58
 80006ea:	4b06      	ldr	r3, [pc, #24]	; (8000704 <HAL_MspInit+0x44>)
 80006ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f2:	603b      	str	r3, [r7, #0]
 80006f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006f6:	bf00      	nop
 80006f8:	370c      	adds	r7, #12
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	40021000 	.word	0x40021000

08000708 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b098      	sub	sp, #96	; 0x60
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000710:	f107 030c 	add.w	r3, r7, #12
 8000714:	2254      	movs	r2, #84	; 0x54
 8000716:	2100      	movs	r1, #0
 8000718:	4618      	mov	r0, r3
 800071a:	f002 fb27 	bl	8002d6c <memset>
  if(hrng->Instance==RNG)
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	4a19      	ldr	r2, [pc, #100]	; (8000788 <HAL_RNG_MspInit+0x80>)
 8000724:	4293      	cmp	r3, r2
 8000726:	d12a      	bne.n	800077e <HAL_RNG_MspInit+0x76>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8000728:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800072c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 800072e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000732:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000734:	2302      	movs	r3, #2
 8000736:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000738:	2301      	movs	r3, #1
 800073a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800073c:	2308      	movs	r3, #8
 800073e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000740:	2307      	movs	r3, #7
 8000742:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 8000744:	2304      	movs	r3, #4
 8000746:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000748:	2302      	movs	r3, #2
 800074a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800074c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000750:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000752:	f107 030c 	add.w	r3, r7, #12
 8000756:	4618      	mov	r0, r3
 8000758:	f001 fd10 	bl	800217c <HAL_RCCEx_PeriphCLKConfig>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <HAL_RNG_MspInit+0x5e>
    {
      Error_Handler();
 8000762:	f7ff ffa7 	bl	80006b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000766:	4b09      	ldr	r3, [pc, #36]	; (800078c <HAL_RNG_MspInit+0x84>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076a:	4a08      	ldr	r2, [pc, #32]	; (800078c <HAL_RNG_MspInit+0x84>)
 800076c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000770:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000772:	4b06      	ldr	r3, [pc, #24]	; (800078c <HAL_RNG_MspInit+0x84>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000776:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800077a:	60bb      	str	r3, [r7, #8]
 800077c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 800077e:	bf00      	nop
 8000780:	3760      	adds	r7, #96	; 0x60
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	50060800 	.word	0x50060800
 800078c:	40021000 	.word	0x40021000

08000790 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b098      	sub	sp, #96	; 0x60
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000798:	f107 030c 	add.w	r3, r7, #12
 800079c:	2254      	movs	r2, #84	; 0x54
 800079e:	2100      	movs	r1, #0
 80007a0:	4618      	mov	r0, r3
 80007a2:	f002 fae3 	bl	8002d6c <memset>
  if(hrtc->Instance==RTC)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4a13      	ldr	r2, [pc, #76]	; (80007f8 <HAL_RTC_MspInit+0x68>)
 80007ac:	4293      	cmp	r3, r2
 80007ae:	d11f      	bne.n	80007f0 <HAL_RTC_MspInit+0x60>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80007b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80007b4:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80007b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007ba:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007bc:	f107 030c 	add.w	r3, r7, #12
 80007c0:	4618      	mov	r0, r3
 80007c2:	f001 fcdb 	bl	800217c <HAL_RCCEx_PeriphCLKConfig>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80007cc:	f7ff ff72 	bl	80006b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80007d0:	4b0a      	ldr	r3, [pc, #40]	; (80007fc <HAL_RTC_MspInit+0x6c>)
 80007d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80007d6:	4a09      	ldr	r2, [pc, #36]	; (80007fc <HAL_RTC_MspInit+0x6c>)
 80007d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80007e0:	2200      	movs	r2, #0
 80007e2:	2100      	movs	r1, #0
 80007e4:	2003      	movs	r0, #3
 80007e6:	f000 fa24 	bl	8000c32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80007ea:	2003      	movs	r0, #3
 80007ec:	f000 fa3d 	bl	8000c6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80007f0:	bf00      	nop
 80007f2:	3760      	adds	r7, #96	; 0x60
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40002800 	.word	0x40002800
 80007fc:	40021000 	.word	0x40021000

08000800 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000804:	e7fe      	b.n	8000804 <NMI_Handler+0x4>

08000806 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000806:	b480      	push	{r7}
 8000808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800080a:	e7fe      	b.n	800080a <HardFault_Handler+0x4>

0800080c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000810:	e7fe      	b.n	8000810 <MemManage_Handler+0x4>

08000812 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000812:	b480      	push	{r7}
 8000814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000816:	e7fe      	b.n	8000816 <BusFault_Handler+0x4>

08000818 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800081c:	e7fe      	b.n	800081c <UsageFault_Handler+0x4>

0800081e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800081e:	b480      	push	{r7}
 8000820:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000822:	bf00      	nop
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr

0800082c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000830:	bf00      	nop
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr

0800083a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800083a:	b480      	push	{r7}
 800083c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800083e:	bf00      	nop
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr

08000848 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800084c:	f000 f8d2 	bl	80009f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000850:	bf00      	nop
 8000852:	bd80      	pop	{r7, pc}

08000854 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8000858:	4802      	ldr	r0, [pc, #8]	; (8000864 <RTC_WKUP_IRQHandler+0x10>)
 800085a:	f002 fa25 	bl	8002ca8 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	200000bc 	.word	0x200000bc

08000868 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b086      	sub	sp, #24
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000870:	4a14      	ldr	r2, [pc, #80]	; (80008c4 <_sbrk+0x5c>)
 8000872:	4b15      	ldr	r3, [pc, #84]	; (80008c8 <_sbrk+0x60>)
 8000874:	1ad3      	subs	r3, r2, r3
 8000876:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800087c:	4b13      	ldr	r3, [pc, #76]	; (80008cc <_sbrk+0x64>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d102      	bne.n	800088a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000884:	4b11      	ldr	r3, [pc, #68]	; (80008cc <_sbrk+0x64>)
 8000886:	4a12      	ldr	r2, [pc, #72]	; (80008d0 <_sbrk+0x68>)
 8000888:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800088a:	4b10      	ldr	r3, [pc, #64]	; (80008cc <_sbrk+0x64>)
 800088c:	681a      	ldr	r2, [r3, #0]
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	4413      	add	r3, r2
 8000892:	693a      	ldr	r2, [r7, #16]
 8000894:	429a      	cmp	r2, r3
 8000896:	d207      	bcs.n	80008a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000898:	f002 fa36 	bl	8002d08 <__errno>
 800089c:	4603      	mov	r3, r0
 800089e:	220c      	movs	r2, #12
 80008a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008a2:	f04f 33ff 	mov.w	r3, #4294967295
 80008a6:	e009      	b.n	80008bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008a8:	4b08      	ldr	r3, [pc, #32]	; (80008cc <_sbrk+0x64>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008ae:	4b07      	ldr	r3, [pc, #28]	; (80008cc <_sbrk+0x64>)
 80008b0:	681a      	ldr	r2, [r3, #0]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	4413      	add	r3, r2
 80008b6:	4a05      	ldr	r2, [pc, #20]	; (80008cc <_sbrk+0x64>)
 80008b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008ba:	68fb      	ldr	r3, [r7, #12]
}
 80008bc:	4618      	mov	r0, r3
 80008be:	3718      	adds	r7, #24
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	20010000 	.word	0x20010000
 80008c8:	00000400 	.word	0x00000400
 80008cc:	20000100 	.word	0x20000100
 80008d0:	20000118 	.word	0x20000118

080008d4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80008d8:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <SystemInit+0x20>)
 80008da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008de:	4a05      	ldr	r2, [pc, #20]	; (80008f4 <SystemInit+0x20>)
 80008e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	e000ed00 	.word	0xe000ed00

080008f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80008f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000930 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008fc:	f7ff ffea 	bl	80008d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000900:	480c      	ldr	r0, [pc, #48]	; (8000934 <LoopForever+0x6>)
  ldr r1, =_edata
 8000902:	490d      	ldr	r1, [pc, #52]	; (8000938 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000904:	4a0d      	ldr	r2, [pc, #52]	; (800093c <LoopForever+0xe>)
  movs r3, #0
 8000906:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000908:	e002      	b.n	8000910 <LoopCopyDataInit>

0800090a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800090a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800090c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800090e:	3304      	adds	r3, #4

08000910 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000910:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000912:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000914:	d3f9      	bcc.n	800090a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000916:	4a0a      	ldr	r2, [pc, #40]	; (8000940 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000918:	4c0a      	ldr	r4, [pc, #40]	; (8000944 <LoopForever+0x16>)
  movs r3, #0
 800091a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800091c:	e001      	b.n	8000922 <LoopFillZerobss>

0800091e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800091e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000920:	3204      	adds	r2, #4

08000922 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000922:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000924:	d3fb      	bcc.n	800091e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000926:	f002 f9f5 	bl	8002d14 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800092a:	f7ff fd6b 	bl	8000404 <main>

0800092e <LoopForever>:

LoopForever:
    b LoopForever
 800092e:	e7fe      	b.n	800092e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000930:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000934:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000938:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 800093c:	08002f4c 	.word	0x08002f4c
  ldr r2, =_sbss
 8000940:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000944:	20000118 	.word	0x20000118

08000948 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000948:	e7fe      	b.n	8000948 <ADC1_IRQHandler>

0800094a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800094a:	b580      	push	{r7, lr}
 800094c:	b082      	sub	sp, #8
 800094e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000950:	2300      	movs	r3, #0
 8000952:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000954:	2003      	movs	r0, #3
 8000956:	f000 f961 	bl	8000c1c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800095a:	200f      	movs	r0, #15
 800095c:	f000 f80e 	bl	800097c <HAL_InitTick>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d002      	beq.n	800096c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000966:	2301      	movs	r3, #1
 8000968:	71fb      	strb	r3, [r7, #7]
 800096a:	e001      	b.n	8000970 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800096c:	f7ff fea8 	bl	80006c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000970:	79fb      	ldrb	r3, [r7, #7]
}
 8000972:	4618      	mov	r0, r3
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
	...

0800097c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000984:	2300      	movs	r3, #0
 8000986:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000988:	4b17      	ldr	r3, [pc, #92]	; (80009e8 <HAL_InitTick+0x6c>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d023      	beq.n	80009d8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000990:	4b16      	ldr	r3, [pc, #88]	; (80009ec <HAL_InitTick+0x70>)
 8000992:	681a      	ldr	r2, [r3, #0]
 8000994:	4b14      	ldr	r3, [pc, #80]	; (80009e8 <HAL_InitTick+0x6c>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	4619      	mov	r1, r3
 800099a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800099e:	fbb3 f3f1 	udiv	r3, r3, r1
 80009a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009a6:	4618      	mov	r0, r3
 80009a8:	f000 f96d 	bl	8000c86 <HAL_SYSTICK_Config>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d10f      	bne.n	80009d2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	2b0f      	cmp	r3, #15
 80009b6:	d809      	bhi.n	80009cc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009b8:	2200      	movs	r2, #0
 80009ba:	6879      	ldr	r1, [r7, #4]
 80009bc:	f04f 30ff 	mov.w	r0, #4294967295
 80009c0:	f000 f937 	bl	8000c32 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009c4:	4a0a      	ldr	r2, [pc, #40]	; (80009f0 <HAL_InitTick+0x74>)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	6013      	str	r3, [r2, #0]
 80009ca:	e007      	b.n	80009dc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80009cc:	2301      	movs	r3, #1
 80009ce:	73fb      	strb	r3, [r7, #15]
 80009d0:	e004      	b.n	80009dc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009d2:	2301      	movs	r3, #1
 80009d4:	73fb      	strb	r3, [r7, #15]
 80009d6:	e001      	b.n	80009dc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009d8:	2301      	movs	r3, #1
 80009da:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3710      	adds	r7, #16
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	20000008 	.word	0x20000008
 80009ec:	20000000 	.word	0x20000000
 80009f0:	20000004 	.word	0x20000004

080009f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009f8:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <HAL_IncTick+0x20>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	461a      	mov	r2, r3
 80009fe:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <HAL_IncTick+0x24>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4413      	add	r3, r2
 8000a04:	4a04      	ldr	r2, [pc, #16]	; (8000a18 <HAL_IncTick+0x24>)
 8000a06:	6013      	str	r3, [r2, #0]
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	20000008 	.word	0x20000008
 8000a18:	20000104 	.word	0x20000104

08000a1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a20:	4b03      	ldr	r3, [pc, #12]	; (8000a30 <HAL_GetTick+0x14>)
 8000a22:	681b      	ldr	r3, [r3, #0]
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	20000104 	.word	0x20000104

08000a34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a3c:	f7ff ffee 	bl	8000a1c <HAL_GetTick>
 8000a40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a4c:	d005      	beq.n	8000a5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000a4e:	4b0a      	ldr	r3, [pc, #40]	; (8000a78 <HAL_Delay+0x44>)
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	461a      	mov	r2, r3
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	4413      	add	r3, r2
 8000a58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a5a:	bf00      	nop
 8000a5c:	f7ff ffde 	bl	8000a1c <HAL_GetTick>
 8000a60:	4602      	mov	r2, r0
 8000a62:	68bb      	ldr	r3, [r7, #8]
 8000a64:	1ad3      	subs	r3, r2, r3
 8000a66:	68fa      	ldr	r2, [r7, #12]
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	d8f7      	bhi.n	8000a5c <HAL_Delay+0x28>
  {
  }
}
 8000a6c:	bf00      	nop
 8000a6e:	bf00      	nop
 8000a70:	3710      	adds	r7, #16
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	20000008 	.word	0x20000008

08000a7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b085      	sub	sp, #20
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	f003 0307 	and.w	r3, r3, #7
 8000a8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a92:	68ba      	ldr	r2, [r7, #8]
 8000a94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a98:	4013      	ands	r3, r2
 8000a9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aa4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000aa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aae:	4a04      	ldr	r2, [pc, #16]	; (8000ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	60d3      	str	r3, [r2, #12]
}
 8000ab4:	bf00      	nop
 8000ab6:	3714      	adds	r7, #20
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr
 8000ac0:	e000ed00 	.word	0xe000ed00

08000ac4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ac8:	4b04      	ldr	r3, [pc, #16]	; (8000adc <__NVIC_GetPriorityGrouping+0x18>)
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	0a1b      	lsrs	r3, r3, #8
 8000ace:	f003 0307 	and.w	r3, r3, #7
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr
 8000adc:	e000ed00 	.word	0xe000ed00

08000ae0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	db0b      	blt.n	8000b0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000af2:	79fb      	ldrb	r3, [r7, #7]
 8000af4:	f003 021f 	and.w	r2, r3, #31
 8000af8:	4907      	ldr	r1, [pc, #28]	; (8000b18 <__NVIC_EnableIRQ+0x38>)
 8000afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afe:	095b      	lsrs	r3, r3, #5
 8000b00:	2001      	movs	r0, #1
 8000b02:	fa00 f202 	lsl.w	r2, r0, r2
 8000b06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b0a:	bf00      	nop
 8000b0c:	370c      	adds	r7, #12
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	e000e100 	.word	0xe000e100

08000b1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	6039      	str	r1, [r7, #0]
 8000b26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	db0a      	blt.n	8000b46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	b2da      	uxtb	r2, r3
 8000b34:	490c      	ldr	r1, [pc, #48]	; (8000b68 <__NVIC_SetPriority+0x4c>)
 8000b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3a:	0112      	lsls	r2, r2, #4
 8000b3c:	b2d2      	uxtb	r2, r2
 8000b3e:	440b      	add	r3, r1
 8000b40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b44:	e00a      	b.n	8000b5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	b2da      	uxtb	r2, r3
 8000b4a:	4908      	ldr	r1, [pc, #32]	; (8000b6c <__NVIC_SetPriority+0x50>)
 8000b4c:	79fb      	ldrb	r3, [r7, #7]
 8000b4e:	f003 030f 	and.w	r3, r3, #15
 8000b52:	3b04      	subs	r3, #4
 8000b54:	0112      	lsls	r2, r2, #4
 8000b56:	b2d2      	uxtb	r2, r2
 8000b58:	440b      	add	r3, r1
 8000b5a:	761a      	strb	r2, [r3, #24]
}
 8000b5c:	bf00      	nop
 8000b5e:	370c      	adds	r7, #12
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr
 8000b68:	e000e100 	.word	0xe000e100
 8000b6c:	e000ed00 	.word	0xe000ed00

08000b70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b089      	sub	sp, #36	; 0x24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	60f8      	str	r0, [r7, #12]
 8000b78:	60b9      	str	r1, [r7, #8]
 8000b7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	f003 0307 	and.w	r3, r3, #7
 8000b82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b84:	69fb      	ldr	r3, [r7, #28]
 8000b86:	f1c3 0307 	rsb	r3, r3, #7
 8000b8a:	2b04      	cmp	r3, #4
 8000b8c:	bf28      	it	cs
 8000b8e:	2304      	movcs	r3, #4
 8000b90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	3304      	adds	r3, #4
 8000b96:	2b06      	cmp	r3, #6
 8000b98:	d902      	bls.n	8000ba0 <NVIC_EncodePriority+0x30>
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	3b03      	subs	r3, #3
 8000b9e:	e000      	b.n	8000ba2 <NVIC_EncodePriority+0x32>
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ba8:	69bb      	ldr	r3, [r7, #24]
 8000baa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bae:	43da      	mvns	r2, r3
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	401a      	ands	r2, r3
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bb8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc2:	43d9      	mvns	r1, r3
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc8:	4313      	orrs	r3, r2
         );
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3724      	adds	r7, #36	; 0x24
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
	...

08000bd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	3b01      	subs	r3, #1
 8000be4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000be8:	d301      	bcc.n	8000bee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bea:	2301      	movs	r3, #1
 8000bec:	e00f      	b.n	8000c0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bee:	4a0a      	ldr	r2, [pc, #40]	; (8000c18 <SysTick_Config+0x40>)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	3b01      	subs	r3, #1
 8000bf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bf6:	210f      	movs	r1, #15
 8000bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bfc:	f7ff ff8e 	bl	8000b1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c00:	4b05      	ldr	r3, [pc, #20]	; (8000c18 <SysTick_Config+0x40>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c06:	4b04      	ldr	r3, [pc, #16]	; (8000c18 <SysTick_Config+0x40>)
 8000c08:	2207      	movs	r2, #7
 8000c0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c0c:	2300      	movs	r3, #0
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	e000e010 	.word	0xe000e010

08000c1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c24:	6878      	ldr	r0, [r7, #4]
 8000c26:	f7ff ff29 	bl	8000a7c <__NVIC_SetPriorityGrouping>
}
 8000c2a:	bf00      	nop
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b086      	sub	sp, #24
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	4603      	mov	r3, r0
 8000c3a:	60b9      	str	r1, [r7, #8]
 8000c3c:	607a      	str	r2, [r7, #4]
 8000c3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c44:	f7ff ff3e 	bl	8000ac4 <__NVIC_GetPriorityGrouping>
 8000c48:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c4a:	687a      	ldr	r2, [r7, #4]
 8000c4c:	68b9      	ldr	r1, [r7, #8]
 8000c4e:	6978      	ldr	r0, [r7, #20]
 8000c50:	f7ff ff8e 	bl	8000b70 <NVIC_EncodePriority>
 8000c54:	4602      	mov	r2, r0
 8000c56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c5a:	4611      	mov	r1, r2
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff ff5d 	bl	8000b1c <__NVIC_SetPriority>
}
 8000c62:	bf00      	nop
 8000c64:	3718      	adds	r7, #24
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b082      	sub	sp, #8
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	4603      	mov	r3, r0
 8000c72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff ff31 	bl	8000ae0 <__NVIC_EnableIRQ>
}
 8000c7e:	bf00      	nop
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b082      	sub	sp, #8
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	f7ff ffa2 	bl	8000bd8 <SysTick_Config>
 8000c94:	4603      	mov	r3, r0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
	...

08000ca0 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b086      	sub	sp, #24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	60f8      	str	r0, [r7, #12]
 8000ca8:	60b9      	str	r1, [r7, #8]
 8000caa:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000cb2:	4b2f      	ldr	r3, [pc, #188]	; (8000d70 <HAL_FLASH_Program+0xd0>)
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	2b01      	cmp	r3, #1
 8000cb8:	d101      	bne.n	8000cbe <HAL_FLASH_Program+0x1e>
 8000cba:	2302      	movs	r3, #2
 8000cbc:	e053      	b.n	8000d66 <HAL_FLASH_Program+0xc6>
 8000cbe:	4b2c      	ldr	r3, [pc, #176]	; (8000d70 <HAL_FLASH_Program+0xd0>)
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000cc4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000cc8:	f000 f888 	bl	8000ddc <FLASH_WaitForLastOperation>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8000cd0:	7dfb      	ldrb	r3, [r7, #23]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d143      	bne.n	8000d5e <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000cd6:	4b26      	ldr	r3, [pc, #152]	; (8000d70 <HAL_FLASH_Program+0xd0>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8000cdc:	4b25      	ldr	r3, [pc, #148]	; (8000d74 <HAL_FLASH_Program+0xd4>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d009      	beq.n	8000cfc <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8000ce8:	4b22      	ldr	r3, [pc, #136]	; (8000d74 <HAL_FLASH_Program+0xd4>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a21      	ldr	r2, [pc, #132]	; (8000d74 <HAL_FLASH_Program+0xd4>)
 8000cee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000cf2:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8000cf4:	4b1e      	ldr	r3, [pc, #120]	; (8000d70 <HAL_FLASH_Program+0xd0>)
 8000cf6:	2202      	movs	r2, #2
 8000cf8:	771a      	strb	r2, [r3, #28]
 8000cfa:	e002      	b.n	8000d02 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8000cfc:	4b1c      	ldr	r3, [pc, #112]	; (8000d70 <HAL_FLASH_Program+0xd0>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d107      	bne.n	8000d18 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8000d08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000d0c:	68b8      	ldr	r0, [r7, #8]
 8000d0e:	f000 f8bd 	bl	8000e8c <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8000d12:	2301      	movs	r3, #1
 8000d14:	613b      	str	r3, [r7, #16]
 8000d16:	e010      	b.n	8000d3a <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d002      	beq.n	8000d24 <HAL_FLASH_Program+0x84>
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	2b02      	cmp	r3, #2
 8000d22:	d10a      	bne.n	8000d3a <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	4619      	mov	r1, r3
 8000d28:	68b8      	ldr	r0, [r7, #8]
 8000d2a:	f000 f8d5 	bl	8000ed8 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	2b02      	cmp	r3, #2
 8000d32:	d102      	bne.n	8000d3a <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8000d34:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000d38:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000d3a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000d3e:	f000 f84d 	bl	8000ddc <FLASH_WaitForLastOperation>
 8000d42:	4603      	mov	r3, r0
 8000d44:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8000d46:	693b      	ldr	r3, [r7, #16]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d006      	beq.n	8000d5a <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8000d4c:	4b09      	ldr	r3, [pc, #36]	; (8000d74 <HAL_FLASH_Program+0xd4>)
 8000d4e:	695a      	ldr	r2, [r3, #20]
 8000d50:	693b      	ldr	r3, [r7, #16]
 8000d52:	43db      	mvns	r3, r3
 8000d54:	4907      	ldr	r1, [pc, #28]	; (8000d74 <HAL_FLASH_Program+0xd4>)
 8000d56:	4013      	ands	r3, r2
 8000d58:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8000d5a:	f000 f9cf 	bl	80010fc <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000d5e:	4b04      	ldr	r3, [pc, #16]	; (8000d70 <HAL_FLASH_Program+0xd0>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	701a      	strb	r2, [r3, #0]

  return status;
 8000d64:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3718      	adds	r7, #24
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	2000000c 	.word	0x2000000c
 8000d74:	40022000 	.word	0x40022000

08000d78 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8000d82:	4b0b      	ldr	r3, [pc, #44]	; (8000db0 <HAL_FLASH_Unlock+0x38>)
 8000d84:	695b      	ldr	r3, [r3, #20]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	da0b      	bge.n	8000da2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000d8a:	4b09      	ldr	r3, [pc, #36]	; (8000db0 <HAL_FLASH_Unlock+0x38>)
 8000d8c:	4a09      	ldr	r2, [pc, #36]	; (8000db4 <HAL_FLASH_Unlock+0x3c>)
 8000d8e:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000d90:	4b07      	ldr	r3, [pc, #28]	; (8000db0 <HAL_FLASH_Unlock+0x38>)
 8000d92:	4a09      	ldr	r2, [pc, #36]	; (8000db8 <HAL_FLASH_Unlock+0x40>)
 8000d94:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8000d96:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <HAL_FLASH_Unlock+0x38>)
 8000d98:	695b      	ldr	r3, [r3, #20]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	da01      	bge.n	8000da2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8000da2:	79fb      	ldrb	r3, [r7, #7]
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	40022000 	.word	0x40022000
 8000db4:	45670123 	.word	0x45670123
 8000db8:	cdef89ab 	.word	0xcdef89ab

08000dbc <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000dc0:	4b05      	ldr	r3, [pc, #20]	; (8000dd8 <HAL_FLASH_Lock+0x1c>)
 8000dc2:	695b      	ldr	r3, [r3, #20]
 8000dc4:	4a04      	ldr	r2, [pc, #16]	; (8000dd8 <HAL_FLASH_Lock+0x1c>)
 8000dc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000dca:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8000dcc:	2300      	movs	r3, #0
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	40022000 	.word	0x40022000

08000ddc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8000de4:	f7ff fe1a 	bl	8000a1c <HAL_GetTick>
 8000de8:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8000dea:	e00d      	b.n	8000e08 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000df2:	d009      	beq.n	8000e08 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8000df4:	f7ff fe12 	bl	8000a1c <HAL_GetTick>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	1ad3      	subs	r3, r2, r3
 8000dfe:	687a      	ldr	r2, [r7, #4]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	d801      	bhi.n	8000e08 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8000e04:	2303      	movs	r3, #3
 8000e06:	e036      	b.n	8000e76 <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8000e08:	4b1d      	ldr	r3, [pc, #116]	; (8000e80 <FLASH_WaitForLastOperation+0xa4>)
 8000e0a:	691b      	ldr	r3, [r3, #16]
 8000e0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d1eb      	bne.n	8000dec <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8000e14:	4b1a      	ldr	r3, [pc, #104]	; (8000e80 <FLASH_WaitForLastOperation+0xa4>)
 8000e16:	691a      	ldr	r2, [r3, #16]
 8000e18:	4b1a      	ldr	r3, [pc, #104]	; (8000e84 <FLASH_WaitForLastOperation+0xa8>)
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d01e      	beq.n	8000e62 <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8000e24:	4b18      	ldr	r3, [pc, #96]	; (8000e88 <FLASH_WaitForLastOperation+0xac>)
 8000e26:	685a      	ldr	r2, [r3, #4]
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	4a16      	ldr	r2, [pc, #88]	; (8000e88 <FLASH_WaitForLastOperation+0xac>)
 8000e2e:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d007      	beq.n	8000e4a <FLASH_WaitForLastOperation+0x6e>
 8000e3a:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <FLASH_WaitForLastOperation+0xa4>)
 8000e3c:	699a      	ldr	r2, [r3, #24]
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8000e44:	490e      	ldr	r1, [pc, #56]	; (8000e80 <FLASH_WaitForLastOperation+0xa4>)
 8000e46:	4313      	orrs	r3, r2
 8000e48:	618b      	str	r3, [r1, #24]
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d004      	beq.n	8000e5e <FLASH_WaitForLastOperation+0x82>
 8000e54:	4a0a      	ldr	r2, [pc, #40]	; (8000e80 <FLASH_WaitForLastOperation+0xa4>)
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8000e5c:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e009      	b.n	8000e76 <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000e62:	4b07      	ldr	r3, [pc, #28]	; (8000e80 <FLASH_WaitForLastOperation+0xa4>)
 8000e64:	691b      	ldr	r3, [r3, #16]
 8000e66:	f003 0301 	and.w	r3, r3, #1
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d002      	beq.n	8000e74 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000e6e:	4b04      	ldr	r3, [pc, #16]	; (8000e80 <FLASH_WaitForLastOperation+0xa4>)
 8000e70:	2201      	movs	r2, #1
 8000e72:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8000e74:	2300      	movs	r3, #0
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3710      	adds	r7, #16
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40022000 	.word	0x40022000
 8000e84:	0002c3fa 	.word	0x0002c3fa
 8000e88:	2000000c 	.word	0x2000000c

08000e8c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b085      	sub	sp, #20
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	60f8      	str	r0, [r7, #12]
 8000e94:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000e98:	4b0e      	ldr	r3, [pc, #56]	; (8000ed4 <FLASH_Program_DoubleWord+0x48>)
 8000e9a:	695b      	ldr	r3, [r3, #20]
 8000e9c:	4a0d      	ldr	r2, [pc, #52]	; (8000ed4 <FLASH_Program_DoubleWord+0x48>)
 8000e9e:	f043 0301 	orr.w	r3, r3, #1
 8000ea2:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	683a      	ldr	r2, [r7, #0]
 8000ea8:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8000eaa:	f3bf 8f6f 	isb	sy
}
 8000eae:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8000eb0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000eb4:	f04f 0200 	mov.w	r2, #0
 8000eb8:	f04f 0300 	mov.w	r3, #0
 8000ebc:	000a      	movs	r2, r1
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	68f9      	ldr	r1, [r7, #12]
 8000ec2:	3104      	adds	r1, #4
 8000ec4:	4613      	mov	r3, r2
 8000ec6:	600b      	str	r3, [r1, #0]
}
 8000ec8:	bf00      	nop
 8000eca:	3714      	adds	r7, #20
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	40022000 	.word	0x40022000

08000ed8 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b089      	sub	sp, #36	; 0x24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8000ee2:	2340      	movs	r3, #64	; 0x40
 8000ee4:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8000eee:	4b14      	ldr	r3, [pc, #80]	; (8000f40 <FLASH_Program_Fast+0x68>)
 8000ef0:	695b      	ldr	r3, [r3, #20]
 8000ef2:	4a13      	ldr	r2, [pc, #76]	; (8000f40 <FLASH_Program_Fast+0x68>)
 8000ef4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ef8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000efa:	f3ef 8310 	mrs	r3, PRIMASK
 8000efe:	60fb      	str	r3, [r7, #12]
  return(result);
 8000f00:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8000f02:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8000f04:	b672      	cpsid	i
}
 8000f06:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	69bb      	ldr	r3, [r7, #24]
 8000f0e:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8000f10:	69bb      	ldr	r3, [r7, #24]
 8000f12:	3304      	adds	r3, #4
 8000f14:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	3304      	adds	r3, #4
 8000f1a:	617b      	str	r3, [r7, #20]
    row_index--;
 8000f1c:	7ffb      	ldrb	r3, [r7, #31]
 8000f1e:	3b01      	subs	r3, #1
 8000f20:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8000f22:	7ffb      	ldrb	r3, [r7, #31]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d1ef      	bne.n	8000f08 <FLASH_Program_Fast+0x30>
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	f383 8810 	msr	PRIMASK, r3
}
 8000f32:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8000f34:	bf00      	nop
 8000f36:	3724      	adds	r7, #36	; 0x24
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	40022000 	.word	0x40022000

08000f44 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000f4e:	4b48      	ldr	r3, [pc, #288]	; (8001070 <HAL_FLASHEx_Erase+0x12c>)
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d101      	bne.n	8000f5a <HAL_FLASHEx_Erase+0x16>
 8000f56:	2302      	movs	r3, #2
 8000f58:	e085      	b.n	8001066 <HAL_FLASHEx_Erase+0x122>
 8000f5a:	4b45      	ldr	r3, [pc, #276]	; (8001070 <HAL_FLASHEx_Erase+0x12c>)
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f60:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000f64:	f7ff ff3a 	bl	8000ddc <FLASH_WaitForLastOperation>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8000f6c:	7bfb      	ldrb	r3, [r7, #15]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d175      	bne.n	800105e <HAL_FLASHEx_Erase+0x11a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000f72:	4b3f      	ldr	r3, [pc, #252]	; (8001070 <HAL_FLASHEx_Erase+0x12c>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8000f78:	4b3e      	ldr	r3, [pc, #248]	; (8001074 <HAL_FLASHEx_Erase+0x130>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d013      	beq.n	8000fac <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8000f84:	4b3b      	ldr	r3, [pc, #236]	; (8001074 <HAL_FLASHEx_Erase+0x130>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d009      	beq.n	8000fa4 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8000f90:	4b38      	ldr	r3, [pc, #224]	; (8001074 <HAL_FLASHEx_Erase+0x130>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a37      	ldr	r2, [pc, #220]	; (8001074 <HAL_FLASHEx_Erase+0x130>)
 8000f96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000f9a:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8000f9c:	4b34      	ldr	r3, [pc, #208]	; (8001070 <HAL_FLASHEx_Erase+0x12c>)
 8000f9e:	2203      	movs	r2, #3
 8000fa0:	771a      	strb	r2, [r3, #28]
 8000fa2:	e016      	b.n	8000fd2 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8000fa4:	4b32      	ldr	r3, [pc, #200]	; (8001070 <HAL_FLASHEx_Erase+0x12c>)
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	771a      	strb	r2, [r3, #28]
 8000faa:	e012      	b.n	8000fd2 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8000fac:	4b31      	ldr	r3, [pc, #196]	; (8001074 <HAL_FLASHEx_Erase+0x130>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d009      	beq.n	8000fcc <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8000fb8:	4b2e      	ldr	r3, [pc, #184]	; (8001074 <HAL_FLASHEx_Erase+0x130>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a2d      	ldr	r2, [pc, #180]	; (8001074 <HAL_FLASHEx_Erase+0x130>)
 8000fbe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000fc2:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8000fc4:	4b2a      	ldr	r3, [pc, #168]	; (8001070 <HAL_FLASHEx_Erase+0x12c>)
 8000fc6:	2202      	movs	r2, #2
 8000fc8:	771a      	strb	r2, [r3, #28]
 8000fca:	e002      	b.n	8000fd2 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8000fcc:	4b28      	ldr	r3, [pc, #160]	; (8001070 <HAL_FLASHEx_Erase+0x12c>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d111      	bne.n	8000ffe <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f000 f84a 	bl	8001078 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000fe4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000fe8:	f7ff fef8 	bl	8000ddc <FLASH_WaitForLastOperation>
 8000fec:	4603      	mov	r3, r0
 8000fee:	73fb      	strb	r3, [r7, #15]
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8000ff0:	4b20      	ldr	r3, [pc, #128]	; (8001074 <HAL_FLASHEx_Erase+0x130>)
 8000ff2:	695b      	ldr	r3, [r3, #20]
 8000ff4:	4a1f      	ldr	r2, [pc, #124]	; (8001074 <HAL_FLASHEx_Erase+0x130>)
 8000ff6:	f023 0304 	bic.w	r3, r3, #4
 8000ffa:	6153      	str	r3, [r2, #20]
 8000ffc:	e02d      	b.n	800105a <HAL_FLASHEx_Erase+0x116>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	f04f 32ff 	mov.w	r2, #4294967295
 8001004:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	60bb      	str	r3, [r7, #8]
 800100c:	e01d      	b.n	800104a <HAL_FLASHEx_Erase+0x106>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	4619      	mov	r1, r3
 8001014:	68b8      	ldr	r0, [r7, #8]
 8001016:	f000 f84d 	bl	80010b4 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800101a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800101e:	f7ff fedd 	bl	8000ddc <FLASH_WaitForLastOperation>
 8001022:	4603      	mov	r3, r0
 8001024:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8001026:	4b13      	ldr	r3, [pc, #76]	; (8001074 <HAL_FLASHEx_Erase+0x130>)
 8001028:	695b      	ldr	r3, [r3, #20]
 800102a:	4a12      	ldr	r2, [pc, #72]	; (8001074 <HAL_FLASHEx_Erase+0x130>)
 800102c:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8001030:	f023 0302 	bic.w	r3, r3, #2
 8001034:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8001036:	7bfb      	ldrb	r3, [r7, #15]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d003      	beq.n	8001044 <HAL_FLASHEx_Erase+0x100>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	68ba      	ldr	r2, [r7, #8]
 8001040:	601a      	str	r2, [r3, #0]
          break;
 8001042:	e00a      	b.n	800105a <HAL_FLASHEx_Erase+0x116>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	3301      	adds	r3, #1
 8001048:	60bb      	str	r3, [r7, #8]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	689a      	ldr	r2, [r3, #8]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	68db      	ldr	r3, [r3, #12]
 8001052:	4413      	add	r3, r2
 8001054:	68ba      	ldr	r2, [r7, #8]
 8001056:	429a      	cmp	r2, r3
 8001058:	d3d9      	bcc.n	800100e <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800105a:	f000 f84f 	bl	80010fc <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800105e:	4b04      	ldr	r3, [pc, #16]	; (8001070 <HAL_FLASHEx_Erase+0x12c>)
 8001060:	2200      	movs	r2, #0
 8001062:	701a      	strb	r2, [r3, #0]

  return status;
 8001064:	7bfb      	ldrb	r3, [r7, #15]
}
 8001066:	4618      	mov	r0, r3
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	2000000c 	.word	0x2000000c
 8001074:	40022000 	.word	0x40022000

08001078 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f003 0301 	and.w	r3, r3, #1
 8001086:	2b00      	cmp	r3, #0
 8001088:	d005      	beq.n	8001096 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800108a:	4b09      	ldr	r3, [pc, #36]	; (80010b0 <FLASH_MassErase+0x38>)
 800108c:	695b      	ldr	r3, [r3, #20]
 800108e:	4a08      	ldr	r2, [pc, #32]	; (80010b0 <FLASH_MassErase+0x38>)
 8001090:	f043 0304 	orr.w	r3, r3, #4
 8001094:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001096:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <FLASH_MassErase+0x38>)
 8001098:	695b      	ldr	r3, [r3, #20]
 800109a:	4a05      	ldr	r2, [pc, #20]	; (80010b0 <FLASH_MassErase+0x38>)
 800109c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010a0:	6153      	str	r3, [r2, #20]
}
 80010a2:	bf00      	nop
 80010a4:	370c      	adds	r7, #12
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	40022000 	.word	0x40022000

080010b4 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 80010be:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <FLASH_PageErase+0x44>)
 80010c0:	695b      	ldr	r3, [r3, #20]
 80010c2:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	00db      	lsls	r3, r3, #3
 80010ca:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 80010ce:	490a      	ldr	r1, [pc, #40]	; (80010f8 <FLASH_PageErase+0x44>)
 80010d0:	4313      	orrs	r3, r2
 80010d2:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 80010d4:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <FLASH_PageErase+0x44>)
 80010d6:	695b      	ldr	r3, [r3, #20]
 80010d8:	4a07      	ldr	r2, [pc, #28]	; (80010f8 <FLASH_PageErase+0x44>)
 80010da:	f043 0302 	orr.w	r3, r3, #2
 80010de:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80010e0:	4b05      	ldr	r3, [pc, #20]	; (80010f8 <FLASH_PageErase+0x44>)
 80010e2:	695b      	ldr	r3, [r3, #20]
 80010e4:	4a04      	ldr	r2, [pc, #16]	; (80010f8 <FLASH_PageErase+0x44>)
 80010e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010ea:	6153      	str	r3, [r2, #20]
}
 80010ec:	bf00      	nop
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	40022000 	.word	0x40022000

080010fc <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8001102:	4b21      	ldr	r3, [pc, #132]	; (8001188 <FLASH_FlushCaches+0x8c>)
 8001104:	7f1b      	ldrb	r3, [r3, #28]
 8001106:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8001108:	79fb      	ldrb	r3, [r7, #7]
 800110a:	2b01      	cmp	r3, #1
 800110c:	d002      	beq.n	8001114 <FLASH_FlushCaches+0x18>
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	2b03      	cmp	r3, #3
 8001112:	d117      	bne.n	8001144 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001114:	4b1d      	ldr	r3, [pc, #116]	; (800118c <FLASH_FlushCaches+0x90>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a1c      	ldr	r2, [pc, #112]	; (800118c <FLASH_FlushCaches+0x90>)
 800111a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800111e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001120:	4b1a      	ldr	r3, [pc, #104]	; (800118c <FLASH_FlushCaches+0x90>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a19      	ldr	r2, [pc, #100]	; (800118c <FLASH_FlushCaches+0x90>)
 8001126:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800112a:	6013      	str	r3, [r2, #0]
 800112c:	4b17      	ldr	r3, [pc, #92]	; (800118c <FLASH_FlushCaches+0x90>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a16      	ldr	r2, [pc, #88]	; (800118c <FLASH_FlushCaches+0x90>)
 8001132:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001136:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001138:	4b14      	ldr	r3, [pc, #80]	; (800118c <FLASH_FlushCaches+0x90>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a13      	ldr	r2, [pc, #76]	; (800118c <FLASH_FlushCaches+0x90>)
 800113e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001142:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	2b02      	cmp	r3, #2
 8001148:	d002      	beq.n	8001150 <FLASH_FlushCaches+0x54>
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	2b03      	cmp	r3, #3
 800114e:	d111      	bne.n	8001174 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001150:	4b0e      	ldr	r3, [pc, #56]	; (800118c <FLASH_FlushCaches+0x90>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a0d      	ldr	r2, [pc, #52]	; (800118c <FLASH_FlushCaches+0x90>)
 8001156:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800115a:	6013      	str	r3, [r2, #0]
 800115c:	4b0b      	ldr	r3, [pc, #44]	; (800118c <FLASH_FlushCaches+0x90>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a0a      	ldr	r2, [pc, #40]	; (800118c <FLASH_FlushCaches+0x90>)
 8001162:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001166:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001168:	4b08      	ldr	r3, [pc, #32]	; (800118c <FLASH_FlushCaches+0x90>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a07      	ldr	r2, [pc, #28]	; (800118c <FLASH_FlushCaches+0x90>)
 800116e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001172:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8001174:	4b04      	ldr	r3, [pc, #16]	; (8001188 <FLASH_FlushCaches+0x8c>)
 8001176:	2200      	movs	r2, #0
 8001178:	771a      	strb	r2, [r3, #28]
}
 800117a:	bf00      	nop
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	2000000c 	.word	0x2000000c
 800118c:	40022000 	.word	0x40022000

08001190 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001190:	b480      	push	{r7}
 8001192:	b087      	sub	sp, #28
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800119a:	2300      	movs	r3, #0
 800119c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800119e:	e148      	b.n	8001432 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	2101      	movs	r1, #1
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	fa01 f303 	lsl.w	r3, r1, r3
 80011ac:	4013      	ands	r3, r2
 80011ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	f000 813a 	beq.w	800142c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f003 0303 	and.w	r3, r3, #3
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d005      	beq.n	80011d0 <HAL_GPIO_Init+0x40>
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f003 0303 	and.w	r3, r3, #3
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	d130      	bne.n	8001232 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	2203      	movs	r2, #3
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	43db      	mvns	r3, r3
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	4013      	ands	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	68da      	ldr	r2, [r3, #12]
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	693a      	ldr	r2, [r7, #16]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001206:	2201      	movs	r2, #1
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	43db      	mvns	r3, r3
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	4013      	ands	r3, r2
 8001214:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	091b      	lsrs	r3, r3, #4
 800121c:	f003 0201 	and.w	r2, r3, #1
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	4313      	orrs	r3, r2
 800122a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f003 0303 	and.w	r3, r3, #3
 800123a:	2b03      	cmp	r3, #3
 800123c:	d017      	beq.n	800126e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	68db      	ldr	r3, [r3, #12]
 8001242:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	2203      	movs	r2, #3
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	43db      	mvns	r3, r3
 8001250:	693a      	ldr	r2, [r7, #16]
 8001252:	4013      	ands	r3, r2
 8001254:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	689a      	ldr	r2, [r3, #8]
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	4313      	orrs	r3, r2
 8001266:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f003 0303 	and.w	r3, r3, #3
 8001276:	2b02      	cmp	r3, #2
 8001278:	d123      	bne.n	80012c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	08da      	lsrs	r2, r3, #3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	3208      	adds	r2, #8
 8001282:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001286:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	f003 0307 	and.w	r3, r3, #7
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	220f      	movs	r2, #15
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	43db      	mvns	r3, r3
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	4013      	ands	r3, r2
 800129c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	691a      	ldr	r2, [r3, #16]
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	f003 0307 	and.w	r3, r3, #7
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	08da      	lsrs	r2, r3, #3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	3208      	adds	r2, #8
 80012bc:	6939      	ldr	r1, [r7, #16]
 80012be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	2203      	movs	r2, #3
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	43db      	mvns	r3, r3
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	4013      	ands	r3, r2
 80012d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f003 0203 	and.w	r2, r3, #3
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	f000 8094 	beq.w	800142c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001304:	4b52      	ldr	r3, [pc, #328]	; (8001450 <HAL_GPIO_Init+0x2c0>)
 8001306:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001308:	4a51      	ldr	r2, [pc, #324]	; (8001450 <HAL_GPIO_Init+0x2c0>)
 800130a:	f043 0301 	orr.w	r3, r3, #1
 800130e:	6613      	str	r3, [r2, #96]	; 0x60
 8001310:	4b4f      	ldr	r3, [pc, #316]	; (8001450 <HAL_GPIO_Init+0x2c0>)
 8001312:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001314:	f003 0301 	and.w	r3, r3, #1
 8001318:	60bb      	str	r3, [r7, #8]
 800131a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800131c:	4a4d      	ldr	r2, [pc, #308]	; (8001454 <HAL_GPIO_Init+0x2c4>)
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	089b      	lsrs	r3, r3, #2
 8001322:	3302      	adds	r3, #2
 8001324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001328:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	f003 0303 	and.w	r3, r3, #3
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	220f      	movs	r2, #15
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	43db      	mvns	r3, r3
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	4013      	ands	r3, r2
 800133e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001346:	d00d      	beq.n	8001364 <HAL_GPIO_Init+0x1d4>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	4a43      	ldr	r2, [pc, #268]	; (8001458 <HAL_GPIO_Init+0x2c8>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d007      	beq.n	8001360 <HAL_GPIO_Init+0x1d0>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4a42      	ldr	r2, [pc, #264]	; (800145c <HAL_GPIO_Init+0x2cc>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d101      	bne.n	800135c <HAL_GPIO_Init+0x1cc>
 8001358:	2302      	movs	r3, #2
 800135a:	e004      	b.n	8001366 <HAL_GPIO_Init+0x1d6>
 800135c:	2307      	movs	r3, #7
 800135e:	e002      	b.n	8001366 <HAL_GPIO_Init+0x1d6>
 8001360:	2301      	movs	r3, #1
 8001362:	e000      	b.n	8001366 <HAL_GPIO_Init+0x1d6>
 8001364:	2300      	movs	r3, #0
 8001366:	697a      	ldr	r2, [r7, #20]
 8001368:	f002 0203 	and.w	r2, r2, #3
 800136c:	0092      	lsls	r2, r2, #2
 800136e:	4093      	lsls	r3, r2
 8001370:	693a      	ldr	r2, [r7, #16]
 8001372:	4313      	orrs	r3, r2
 8001374:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001376:	4937      	ldr	r1, [pc, #220]	; (8001454 <HAL_GPIO_Init+0x2c4>)
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	089b      	lsrs	r3, r3, #2
 800137c:	3302      	adds	r3, #2
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001384:	4b36      	ldr	r3, [pc, #216]	; (8001460 <HAL_GPIO_Init+0x2d0>)
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	43db      	mvns	r3, r3
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	4013      	ands	r3, r2
 8001392:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800139c:	2b00      	cmp	r3, #0
 800139e:	d003      	beq.n	80013a8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80013a0:	693a      	ldr	r2, [r7, #16]
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013a8:	4a2d      	ldr	r2, [pc, #180]	; (8001460 <HAL_GPIO_Init+0x2d0>)
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80013ae:	4b2c      	ldr	r3, [pc, #176]	; (8001460 <HAL_GPIO_Init+0x2d0>)
 80013b0:	68db      	ldr	r3, [r3, #12]
 80013b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	43db      	mvns	r3, r3
 80013b8:	693a      	ldr	r2, [r7, #16]
 80013ba:	4013      	ands	r3, r2
 80013bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d003      	beq.n	80013d2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013d2:	4a23      	ldr	r2, [pc, #140]	; (8001460 <HAL_GPIO_Init+0x2d0>)
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80013d8:	4b21      	ldr	r3, [pc, #132]	; (8001460 <HAL_GPIO_Init+0x2d0>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	43db      	mvns	r3, r3
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	4013      	ands	r3, r2
 80013e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d003      	beq.n	80013fc <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80013f4:	693a      	ldr	r2, [r7, #16]
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013fc:	4a18      	ldr	r2, [pc, #96]	; (8001460 <HAL_GPIO_Init+0x2d0>)
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001402:	4b17      	ldr	r3, [pc, #92]	; (8001460 <HAL_GPIO_Init+0x2d0>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	43db      	mvns	r3, r3
 800140c:	693a      	ldr	r2, [r7, #16]
 800140e:	4013      	ands	r3, r2
 8001410:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d003      	beq.n	8001426 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	4313      	orrs	r3, r2
 8001424:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001426:	4a0e      	ldr	r2, [pc, #56]	; (8001460 <HAL_GPIO_Init+0x2d0>)
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	3301      	adds	r3, #1
 8001430:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	fa22 f303 	lsr.w	r3, r2, r3
 800143c:	2b00      	cmp	r3, #0
 800143e:	f47f aeaf 	bne.w	80011a0 <HAL_GPIO_Init+0x10>
  }
}
 8001442:	bf00      	nop
 8001444:	bf00      	nop
 8001446:	371c      	adds	r7, #28
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	40021000 	.word	0x40021000
 8001454:	40010000 	.word	0x40010000
 8001458:	48000400 	.word	0x48000400
 800145c:	48000800 	.word	0x48000800
 8001460:	40010400 	.word	0x40010400

08001464 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	460b      	mov	r3, r1
 800146e:	807b      	strh	r3, [r7, #2]
 8001470:	4613      	mov	r3, r2
 8001472:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001474:	787b      	ldrb	r3, [r7, #1]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d003      	beq.n	8001482 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800147a:	887a      	ldrh	r2, [r7, #2]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001480:	e002      	b.n	8001488 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001482:	887a      	ldrh	r2, [r7, #2]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001488:	bf00      	nop
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001498:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a04      	ldr	r2, [pc, #16]	; (80014b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800149e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014a2:	6013      	str	r3, [r2, #0]
}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	40007000 	.word	0x40007000

080014b4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80014b8:	4b04      	ldr	r3, [pc, #16]	; (80014cc <HAL_PWREx_GetVoltageRange+0x18>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	40007000 	.word	0x40007000

080014d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014de:	d130      	bne.n	8001542 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80014e0:	4b23      	ldr	r3, [pc, #140]	; (8001570 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014ec:	d038      	beq.n	8001560 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014ee:	4b20      	ldr	r3, [pc, #128]	; (8001570 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014f6:	4a1e      	ldr	r2, [pc, #120]	; (8001570 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014fc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80014fe:	4b1d      	ldr	r3, [pc, #116]	; (8001574 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2232      	movs	r2, #50	; 0x32
 8001504:	fb02 f303 	mul.w	r3, r2, r3
 8001508:	4a1b      	ldr	r2, [pc, #108]	; (8001578 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800150a:	fba2 2303 	umull	r2, r3, r2, r3
 800150e:	0c9b      	lsrs	r3, r3, #18
 8001510:	3301      	adds	r3, #1
 8001512:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001514:	e002      	b.n	800151c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	3b01      	subs	r3, #1
 800151a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800151c:	4b14      	ldr	r3, [pc, #80]	; (8001570 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800151e:	695b      	ldr	r3, [r3, #20]
 8001520:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001524:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001528:	d102      	bne.n	8001530 <HAL_PWREx_ControlVoltageScaling+0x60>
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d1f2      	bne.n	8001516 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001530:	4b0f      	ldr	r3, [pc, #60]	; (8001570 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001532:	695b      	ldr	r3, [r3, #20]
 8001534:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001538:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800153c:	d110      	bne.n	8001560 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e00f      	b.n	8001562 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001542:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800154a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800154e:	d007      	beq.n	8001560 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001550:	4b07      	ldr	r3, [pc, #28]	; (8001570 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001558:	4a05      	ldr	r2, [pc, #20]	; (8001570 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800155a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800155e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001560:	2300      	movs	r3, #0
}
 8001562:	4618      	mov	r0, r3
 8001564:	3714      	adds	r7, #20
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	40007000 	.word	0x40007000
 8001574:	20000000 	.word	0x20000000
 8001578:	431bde83 	.word	0x431bde83

0800157c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b088      	sub	sp, #32
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d102      	bne.n	8001590 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	f000 bc02 	b.w	8001d94 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001590:	4b96      	ldr	r3, [pc, #600]	; (80017ec <HAL_RCC_OscConfig+0x270>)
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	f003 030c 	and.w	r3, r3, #12
 8001598:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800159a:	4b94      	ldr	r3, [pc, #592]	; (80017ec <HAL_RCC_OscConfig+0x270>)
 800159c:	68db      	ldr	r3, [r3, #12]
 800159e:	f003 0303 	and.w	r3, r3, #3
 80015a2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0310 	and.w	r3, r3, #16
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	f000 80e4 	beq.w	800177a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d007      	beq.n	80015c8 <HAL_RCC_OscConfig+0x4c>
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	2b0c      	cmp	r3, #12
 80015bc:	f040 808b 	bne.w	80016d6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	f040 8087 	bne.w	80016d6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015c8:	4b88      	ldr	r3, [pc, #544]	; (80017ec <HAL_RCC_OscConfig+0x270>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0302 	and.w	r3, r3, #2
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d005      	beq.n	80015e0 <HAL_RCC_OscConfig+0x64>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d101      	bne.n	80015e0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e3d9      	b.n	8001d94 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6a1a      	ldr	r2, [r3, #32]
 80015e4:	4b81      	ldr	r3, [pc, #516]	; (80017ec <HAL_RCC_OscConfig+0x270>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 0308 	and.w	r3, r3, #8
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d004      	beq.n	80015fa <HAL_RCC_OscConfig+0x7e>
 80015f0:	4b7e      	ldr	r3, [pc, #504]	; (80017ec <HAL_RCC_OscConfig+0x270>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015f8:	e005      	b.n	8001606 <HAL_RCC_OscConfig+0x8a>
 80015fa:	4b7c      	ldr	r3, [pc, #496]	; (80017ec <HAL_RCC_OscConfig+0x270>)
 80015fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001600:	091b      	lsrs	r3, r3, #4
 8001602:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001606:	4293      	cmp	r3, r2
 8001608:	d223      	bcs.n	8001652 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6a1b      	ldr	r3, [r3, #32]
 800160e:	4618      	mov	r0, r3
 8001610:	f000 fd54 	bl	80020bc <RCC_SetFlashLatencyFromMSIRange>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e3ba      	b.n	8001d94 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800161e:	4b73      	ldr	r3, [pc, #460]	; (80017ec <HAL_RCC_OscConfig+0x270>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a72      	ldr	r2, [pc, #456]	; (80017ec <HAL_RCC_OscConfig+0x270>)
 8001624:	f043 0308 	orr.w	r3, r3, #8
 8001628:	6013      	str	r3, [r2, #0]
 800162a:	4b70      	ldr	r3, [pc, #448]	; (80017ec <HAL_RCC_OscConfig+0x270>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6a1b      	ldr	r3, [r3, #32]
 8001636:	496d      	ldr	r1, [pc, #436]	; (80017ec <HAL_RCC_OscConfig+0x270>)
 8001638:	4313      	orrs	r3, r2
 800163a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800163c:	4b6b      	ldr	r3, [pc, #428]	; (80017ec <HAL_RCC_OscConfig+0x270>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	69db      	ldr	r3, [r3, #28]
 8001648:	021b      	lsls	r3, r3, #8
 800164a:	4968      	ldr	r1, [pc, #416]	; (80017ec <HAL_RCC_OscConfig+0x270>)
 800164c:	4313      	orrs	r3, r2
 800164e:	604b      	str	r3, [r1, #4]
 8001650:	e025      	b.n	800169e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001652:	4b66      	ldr	r3, [pc, #408]	; (80017ec <HAL_RCC_OscConfig+0x270>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a65      	ldr	r2, [pc, #404]	; (80017ec <HAL_RCC_OscConfig+0x270>)
 8001658:	f043 0308 	orr.w	r3, r3, #8
 800165c:	6013      	str	r3, [r2, #0]
 800165e:	4b63      	ldr	r3, [pc, #396]	; (80017ec <HAL_RCC_OscConfig+0x270>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6a1b      	ldr	r3, [r3, #32]
 800166a:	4960      	ldr	r1, [pc, #384]	; (80017ec <HAL_RCC_OscConfig+0x270>)
 800166c:	4313      	orrs	r3, r2
 800166e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001670:	4b5e      	ldr	r3, [pc, #376]	; (80017ec <HAL_RCC_OscConfig+0x270>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	69db      	ldr	r3, [r3, #28]
 800167c:	021b      	lsls	r3, r3, #8
 800167e:	495b      	ldr	r1, [pc, #364]	; (80017ec <HAL_RCC_OscConfig+0x270>)
 8001680:	4313      	orrs	r3, r2
 8001682:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d109      	bne.n	800169e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a1b      	ldr	r3, [r3, #32]
 800168e:	4618      	mov	r0, r3
 8001690:	f000 fd14 	bl	80020bc <RCC_SetFlashLatencyFromMSIRange>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e37a      	b.n	8001d94 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800169e:	f000 fc81 	bl	8001fa4 <HAL_RCC_GetSysClockFreq>
 80016a2:	4602      	mov	r2, r0
 80016a4:	4b51      	ldr	r3, [pc, #324]	; (80017ec <HAL_RCC_OscConfig+0x270>)
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	091b      	lsrs	r3, r3, #4
 80016aa:	f003 030f 	and.w	r3, r3, #15
 80016ae:	4950      	ldr	r1, [pc, #320]	; (80017f0 <HAL_RCC_OscConfig+0x274>)
 80016b0:	5ccb      	ldrb	r3, [r1, r3]
 80016b2:	f003 031f 	and.w	r3, r3, #31
 80016b6:	fa22 f303 	lsr.w	r3, r2, r3
 80016ba:	4a4e      	ldr	r2, [pc, #312]	; (80017f4 <HAL_RCC_OscConfig+0x278>)
 80016bc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80016be:	4b4e      	ldr	r3, [pc, #312]	; (80017f8 <HAL_RCC_OscConfig+0x27c>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff f95a 	bl	800097c <HAL_InitTick>
 80016c8:	4603      	mov	r3, r0
 80016ca:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80016cc:	7bfb      	ldrb	r3, [r7, #15]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d052      	beq.n	8001778 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80016d2:	7bfb      	ldrb	r3, [r7, #15]
 80016d4:	e35e      	b.n	8001d94 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	699b      	ldr	r3, [r3, #24]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d032      	beq.n	8001744 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80016de:	4b43      	ldr	r3, [pc, #268]	; (80017ec <HAL_RCC_OscConfig+0x270>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a42      	ldr	r2, [pc, #264]	; (80017ec <HAL_RCC_OscConfig+0x270>)
 80016e4:	f043 0301 	orr.w	r3, r3, #1
 80016e8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016ea:	f7ff f997 	bl	8000a1c <HAL_GetTick>
 80016ee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016f0:	e008      	b.n	8001704 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016f2:	f7ff f993 	bl	8000a1c <HAL_GetTick>
 80016f6:	4602      	mov	r2, r0
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d901      	bls.n	8001704 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	e347      	b.n	8001d94 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001704:	4b39      	ldr	r3, [pc, #228]	; (80017ec <HAL_RCC_OscConfig+0x270>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0302 	and.w	r3, r3, #2
 800170c:	2b00      	cmp	r3, #0
 800170e:	d0f0      	beq.n	80016f2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001710:	4b36      	ldr	r3, [pc, #216]	; (80017ec <HAL_RCC_OscConfig+0x270>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a35      	ldr	r2, [pc, #212]	; (80017ec <HAL_RCC_OscConfig+0x270>)
 8001716:	f043 0308 	orr.w	r3, r3, #8
 800171a:	6013      	str	r3, [r2, #0]
 800171c:	4b33      	ldr	r3, [pc, #204]	; (80017ec <HAL_RCC_OscConfig+0x270>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6a1b      	ldr	r3, [r3, #32]
 8001728:	4930      	ldr	r1, [pc, #192]	; (80017ec <HAL_RCC_OscConfig+0x270>)
 800172a:	4313      	orrs	r3, r2
 800172c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800172e:	4b2f      	ldr	r3, [pc, #188]	; (80017ec <HAL_RCC_OscConfig+0x270>)
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	69db      	ldr	r3, [r3, #28]
 800173a:	021b      	lsls	r3, r3, #8
 800173c:	492b      	ldr	r1, [pc, #172]	; (80017ec <HAL_RCC_OscConfig+0x270>)
 800173e:	4313      	orrs	r3, r2
 8001740:	604b      	str	r3, [r1, #4]
 8001742:	e01a      	b.n	800177a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001744:	4b29      	ldr	r3, [pc, #164]	; (80017ec <HAL_RCC_OscConfig+0x270>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a28      	ldr	r2, [pc, #160]	; (80017ec <HAL_RCC_OscConfig+0x270>)
 800174a:	f023 0301 	bic.w	r3, r3, #1
 800174e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001750:	f7ff f964 	bl	8000a1c <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001756:	e008      	b.n	800176a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001758:	f7ff f960 	bl	8000a1c <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b02      	cmp	r3, #2
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e314      	b.n	8001d94 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800176a:	4b20      	ldr	r3, [pc, #128]	; (80017ec <HAL_RCC_OscConfig+0x270>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	2b00      	cmp	r3, #0
 8001774:	d1f0      	bne.n	8001758 <HAL_RCC_OscConfig+0x1dc>
 8001776:	e000      	b.n	800177a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001778:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	2b00      	cmp	r3, #0
 8001784:	d073      	beq.n	800186e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	2b08      	cmp	r3, #8
 800178a:	d005      	beq.n	8001798 <HAL_RCC_OscConfig+0x21c>
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	2b0c      	cmp	r3, #12
 8001790:	d10e      	bne.n	80017b0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	2b03      	cmp	r3, #3
 8001796:	d10b      	bne.n	80017b0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001798:	4b14      	ldr	r3, [pc, #80]	; (80017ec <HAL_RCC_OscConfig+0x270>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d063      	beq.n	800186c <HAL_RCC_OscConfig+0x2f0>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d15f      	bne.n	800186c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e2f1      	b.n	8001d94 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017b8:	d106      	bne.n	80017c8 <HAL_RCC_OscConfig+0x24c>
 80017ba:	4b0c      	ldr	r3, [pc, #48]	; (80017ec <HAL_RCC_OscConfig+0x270>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a0b      	ldr	r2, [pc, #44]	; (80017ec <HAL_RCC_OscConfig+0x270>)
 80017c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017c4:	6013      	str	r3, [r2, #0]
 80017c6:	e025      	b.n	8001814 <HAL_RCC_OscConfig+0x298>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017d0:	d114      	bne.n	80017fc <HAL_RCC_OscConfig+0x280>
 80017d2:	4b06      	ldr	r3, [pc, #24]	; (80017ec <HAL_RCC_OscConfig+0x270>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a05      	ldr	r2, [pc, #20]	; (80017ec <HAL_RCC_OscConfig+0x270>)
 80017d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017dc:	6013      	str	r3, [r2, #0]
 80017de:	4b03      	ldr	r3, [pc, #12]	; (80017ec <HAL_RCC_OscConfig+0x270>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a02      	ldr	r2, [pc, #8]	; (80017ec <HAL_RCC_OscConfig+0x270>)
 80017e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017e8:	6013      	str	r3, [r2, #0]
 80017ea:	e013      	b.n	8001814 <HAL_RCC_OscConfig+0x298>
 80017ec:	40021000 	.word	0x40021000
 80017f0:	08002f04 	.word	0x08002f04
 80017f4:	20000000 	.word	0x20000000
 80017f8:	20000004 	.word	0x20000004
 80017fc:	4ba0      	ldr	r3, [pc, #640]	; (8001a80 <HAL_RCC_OscConfig+0x504>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a9f      	ldr	r2, [pc, #636]	; (8001a80 <HAL_RCC_OscConfig+0x504>)
 8001802:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001806:	6013      	str	r3, [r2, #0]
 8001808:	4b9d      	ldr	r3, [pc, #628]	; (8001a80 <HAL_RCC_OscConfig+0x504>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a9c      	ldr	r2, [pc, #624]	; (8001a80 <HAL_RCC_OscConfig+0x504>)
 800180e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001812:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d013      	beq.n	8001844 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800181c:	f7ff f8fe 	bl	8000a1c <HAL_GetTick>
 8001820:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001822:	e008      	b.n	8001836 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001824:	f7ff f8fa 	bl	8000a1c <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b64      	cmp	r3, #100	; 0x64
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e2ae      	b.n	8001d94 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001836:	4b92      	ldr	r3, [pc, #584]	; (8001a80 <HAL_RCC_OscConfig+0x504>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d0f0      	beq.n	8001824 <HAL_RCC_OscConfig+0x2a8>
 8001842:	e014      	b.n	800186e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001844:	f7ff f8ea 	bl	8000a1c <HAL_GetTick>
 8001848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800184a:	e008      	b.n	800185e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800184c:	f7ff f8e6 	bl	8000a1c <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b64      	cmp	r3, #100	; 0x64
 8001858:	d901      	bls.n	800185e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e29a      	b.n	8001d94 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800185e:	4b88      	ldr	r3, [pc, #544]	; (8001a80 <HAL_RCC_OscConfig+0x504>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d1f0      	bne.n	800184c <HAL_RCC_OscConfig+0x2d0>
 800186a:	e000      	b.n	800186e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800186c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	2b00      	cmp	r3, #0
 8001878:	d060      	beq.n	800193c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	2b04      	cmp	r3, #4
 800187e:	d005      	beq.n	800188c <HAL_RCC_OscConfig+0x310>
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	2b0c      	cmp	r3, #12
 8001884:	d119      	bne.n	80018ba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	2b02      	cmp	r3, #2
 800188a:	d116      	bne.n	80018ba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800188c:	4b7c      	ldr	r3, [pc, #496]	; (8001a80 <HAL_RCC_OscConfig+0x504>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001894:	2b00      	cmp	r3, #0
 8001896:	d005      	beq.n	80018a4 <HAL_RCC_OscConfig+0x328>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d101      	bne.n	80018a4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e277      	b.n	8001d94 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018a4:	4b76      	ldr	r3, [pc, #472]	; (8001a80 <HAL_RCC_OscConfig+0x504>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	691b      	ldr	r3, [r3, #16]
 80018b0:	061b      	lsls	r3, r3, #24
 80018b2:	4973      	ldr	r1, [pc, #460]	; (8001a80 <HAL_RCC_OscConfig+0x504>)
 80018b4:	4313      	orrs	r3, r2
 80018b6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018b8:	e040      	b.n	800193c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d023      	beq.n	800190a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018c2:	4b6f      	ldr	r3, [pc, #444]	; (8001a80 <HAL_RCC_OscConfig+0x504>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a6e      	ldr	r2, [pc, #440]	; (8001a80 <HAL_RCC_OscConfig+0x504>)
 80018c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ce:	f7ff f8a5 	bl	8000a1c <HAL_GetTick>
 80018d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018d4:	e008      	b.n	80018e8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018d6:	f7ff f8a1 	bl	8000a1c <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d901      	bls.n	80018e8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	e255      	b.n	8001d94 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018e8:	4b65      	ldr	r3, [pc, #404]	; (8001a80 <HAL_RCC_OscConfig+0x504>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d0f0      	beq.n	80018d6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018f4:	4b62      	ldr	r3, [pc, #392]	; (8001a80 <HAL_RCC_OscConfig+0x504>)
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	691b      	ldr	r3, [r3, #16]
 8001900:	061b      	lsls	r3, r3, #24
 8001902:	495f      	ldr	r1, [pc, #380]	; (8001a80 <HAL_RCC_OscConfig+0x504>)
 8001904:	4313      	orrs	r3, r2
 8001906:	604b      	str	r3, [r1, #4]
 8001908:	e018      	b.n	800193c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800190a:	4b5d      	ldr	r3, [pc, #372]	; (8001a80 <HAL_RCC_OscConfig+0x504>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a5c      	ldr	r2, [pc, #368]	; (8001a80 <HAL_RCC_OscConfig+0x504>)
 8001910:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001914:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001916:	f7ff f881 	bl	8000a1c <HAL_GetTick>
 800191a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800191c:	e008      	b.n	8001930 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800191e:	f7ff f87d 	bl	8000a1c <HAL_GetTick>
 8001922:	4602      	mov	r2, r0
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	2b02      	cmp	r3, #2
 800192a:	d901      	bls.n	8001930 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800192c:	2303      	movs	r3, #3
 800192e:	e231      	b.n	8001d94 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001930:	4b53      	ldr	r3, [pc, #332]	; (8001a80 <HAL_RCC_OscConfig+0x504>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001938:	2b00      	cmp	r3, #0
 800193a:	d1f0      	bne.n	800191e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0308 	and.w	r3, r3, #8
 8001944:	2b00      	cmp	r3, #0
 8001946:	d03c      	beq.n	80019c2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	695b      	ldr	r3, [r3, #20]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d01c      	beq.n	800198a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001950:	4b4b      	ldr	r3, [pc, #300]	; (8001a80 <HAL_RCC_OscConfig+0x504>)
 8001952:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001956:	4a4a      	ldr	r2, [pc, #296]	; (8001a80 <HAL_RCC_OscConfig+0x504>)
 8001958:	f043 0301 	orr.w	r3, r3, #1
 800195c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001960:	f7ff f85c 	bl	8000a1c <HAL_GetTick>
 8001964:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001966:	e008      	b.n	800197a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001968:	f7ff f858 	bl	8000a1c <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b02      	cmp	r3, #2
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e20c      	b.n	8001d94 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800197a:	4b41      	ldr	r3, [pc, #260]	; (8001a80 <HAL_RCC_OscConfig+0x504>)
 800197c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001980:	f003 0302 	and.w	r3, r3, #2
 8001984:	2b00      	cmp	r3, #0
 8001986:	d0ef      	beq.n	8001968 <HAL_RCC_OscConfig+0x3ec>
 8001988:	e01b      	b.n	80019c2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800198a:	4b3d      	ldr	r3, [pc, #244]	; (8001a80 <HAL_RCC_OscConfig+0x504>)
 800198c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001990:	4a3b      	ldr	r2, [pc, #236]	; (8001a80 <HAL_RCC_OscConfig+0x504>)
 8001992:	f023 0301 	bic.w	r3, r3, #1
 8001996:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800199a:	f7ff f83f 	bl	8000a1c <HAL_GetTick>
 800199e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019a0:	e008      	b.n	80019b4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019a2:	f7ff f83b 	bl	8000a1c <HAL_GetTick>
 80019a6:	4602      	mov	r2, r0
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d901      	bls.n	80019b4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e1ef      	b.n	8001d94 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019b4:	4b32      	ldr	r3, [pc, #200]	; (8001a80 <HAL_RCC_OscConfig+0x504>)
 80019b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d1ef      	bne.n	80019a2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0304 	and.w	r3, r3, #4
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	f000 80a6 	beq.w	8001b1c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019d0:	2300      	movs	r3, #0
 80019d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80019d4:	4b2a      	ldr	r3, [pc, #168]	; (8001a80 <HAL_RCC_OscConfig+0x504>)
 80019d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d10d      	bne.n	80019fc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019e0:	4b27      	ldr	r3, [pc, #156]	; (8001a80 <HAL_RCC_OscConfig+0x504>)
 80019e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e4:	4a26      	ldr	r2, [pc, #152]	; (8001a80 <HAL_RCC_OscConfig+0x504>)
 80019e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ea:	6593      	str	r3, [r2, #88]	; 0x58
 80019ec:	4b24      	ldr	r3, [pc, #144]	; (8001a80 <HAL_RCC_OscConfig+0x504>)
 80019ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f4:	60bb      	str	r3, [r7, #8]
 80019f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019f8:	2301      	movs	r3, #1
 80019fa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019fc:	4b21      	ldr	r3, [pc, #132]	; (8001a84 <HAL_RCC_OscConfig+0x508>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d118      	bne.n	8001a3a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a08:	4b1e      	ldr	r3, [pc, #120]	; (8001a84 <HAL_RCC_OscConfig+0x508>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a1d      	ldr	r2, [pc, #116]	; (8001a84 <HAL_RCC_OscConfig+0x508>)
 8001a0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a12:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a14:	f7ff f802 	bl	8000a1c <HAL_GetTick>
 8001a18:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a1a:	e008      	b.n	8001a2e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a1c:	f7fe fffe 	bl	8000a1c <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e1b2      	b.n	8001d94 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a2e:	4b15      	ldr	r3, [pc, #84]	; (8001a84 <HAL_RCC_OscConfig+0x508>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d0f0      	beq.n	8001a1c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d108      	bne.n	8001a54 <HAL_RCC_OscConfig+0x4d8>
 8001a42:	4b0f      	ldr	r3, [pc, #60]	; (8001a80 <HAL_RCC_OscConfig+0x504>)
 8001a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a48:	4a0d      	ldr	r2, [pc, #52]	; (8001a80 <HAL_RCC_OscConfig+0x504>)
 8001a4a:	f043 0301 	orr.w	r3, r3, #1
 8001a4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a52:	e029      	b.n	8001aa8 <HAL_RCC_OscConfig+0x52c>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	2b05      	cmp	r3, #5
 8001a5a:	d115      	bne.n	8001a88 <HAL_RCC_OscConfig+0x50c>
 8001a5c:	4b08      	ldr	r3, [pc, #32]	; (8001a80 <HAL_RCC_OscConfig+0x504>)
 8001a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a62:	4a07      	ldr	r2, [pc, #28]	; (8001a80 <HAL_RCC_OscConfig+0x504>)
 8001a64:	f043 0304 	orr.w	r3, r3, #4
 8001a68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a6c:	4b04      	ldr	r3, [pc, #16]	; (8001a80 <HAL_RCC_OscConfig+0x504>)
 8001a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a72:	4a03      	ldr	r2, [pc, #12]	; (8001a80 <HAL_RCC_OscConfig+0x504>)
 8001a74:	f043 0301 	orr.w	r3, r3, #1
 8001a78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a7c:	e014      	b.n	8001aa8 <HAL_RCC_OscConfig+0x52c>
 8001a7e:	bf00      	nop
 8001a80:	40021000 	.word	0x40021000
 8001a84:	40007000 	.word	0x40007000
 8001a88:	4b9a      	ldr	r3, [pc, #616]	; (8001cf4 <HAL_RCC_OscConfig+0x778>)
 8001a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a8e:	4a99      	ldr	r2, [pc, #612]	; (8001cf4 <HAL_RCC_OscConfig+0x778>)
 8001a90:	f023 0301 	bic.w	r3, r3, #1
 8001a94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a98:	4b96      	ldr	r3, [pc, #600]	; (8001cf4 <HAL_RCC_OscConfig+0x778>)
 8001a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a9e:	4a95      	ldr	r2, [pc, #596]	; (8001cf4 <HAL_RCC_OscConfig+0x778>)
 8001aa0:	f023 0304 	bic.w	r3, r3, #4
 8001aa4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d016      	beq.n	8001ade <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ab0:	f7fe ffb4 	bl	8000a1c <HAL_GetTick>
 8001ab4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ab6:	e00a      	b.n	8001ace <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ab8:	f7fe ffb0 	bl	8000a1c <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e162      	b.n	8001d94 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ace:	4b89      	ldr	r3, [pc, #548]	; (8001cf4 <HAL_RCC_OscConfig+0x778>)
 8001ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ad4:	f003 0302 	and.w	r3, r3, #2
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d0ed      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x53c>
 8001adc:	e015      	b.n	8001b0a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ade:	f7fe ff9d 	bl	8000a1c <HAL_GetTick>
 8001ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ae4:	e00a      	b.n	8001afc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ae6:	f7fe ff99 	bl	8000a1c <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e14b      	b.n	8001d94 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001afc:	4b7d      	ldr	r3, [pc, #500]	; (8001cf4 <HAL_RCC_OscConfig+0x778>)
 8001afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d1ed      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b0a:	7ffb      	ldrb	r3, [r7, #31]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d105      	bne.n	8001b1c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b10:	4b78      	ldr	r3, [pc, #480]	; (8001cf4 <HAL_RCC_OscConfig+0x778>)
 8001b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b14:	4a77      	ldr	r2, [pc, #476]	; (8001cf4 <HAL_RCC_OscConfig+0x778>)
 8001b16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b1a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0320 	and.w	r3, r3, #32
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d03c      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d01c      	beq.n	8001b6a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b30:	4b70      	ldr	r3, [pc, #448]	; (8001cf4 <HAL_RCC_OscConfig+0x778>)
 8001b32:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b36:	4a6f      	ldr	r2, [pc, #444]	; (8001cf4 <HAL_RCC_OscConfig+0x778>)
 8001b38:	f043 0301 	orr.w	r3, r3, #1
 8001b3c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b40:	f7fe ff6c 	bl	8000a1c <HAL_GetTick>
 8001b44:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b46:	e008      	b.n	8001b5a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b48:	f7fe ff68 	bl	8000a1c <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e11c      	b.n	8001d94 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b5a:	4b66      	ldr	r3, [pc, #408]	; (8001cf4 <HAL_RCC_OscConfig+0x778>)
 8001b5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b60:	f003 0302 	and.w	r3, r3, #2
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d0ef      	beq.n	8001b48 <HAL_RCC_OscConfig+0x5cc>
 8001b68:	e01b      	b.n	8001ba2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b6a:	4b62      	ldr	r3, [pc, #392]	; (8001cf4 <HAL_RCC_OscConfig+0x778>)
 8001b6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b70:	4a60      	ldr	r2, [pc, #384]	; (8001cf4 <HAL_RCC_OscConfig+0x778>)
 8001b72:	f023 0301 	bic.w	r3, r3, #1
 8001b76:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b7a:	f7fe ff4f 	bl	8000a1c <HAL_GetTick>
 8001b7e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b80:	e008      	b.n	8001b94 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b82:	f7fe ff4b 	bl	8000a1c <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d901      	bls.n	8001b94 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	e0ff      	b.n	8001d94 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b94:	4b57      	ldr	r3, [pc, #348]	; (8001cf4 <HAL_RCC_OscConfig+0x778>)
 8001b96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d1ef      	bne.n	8001b82 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	f000 80f3 	beq.w	8001d92 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	f040 80c9 	bne.w	8001d48 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001bb6:	4b4f      	ldr	r3, [pc, #316]	; (8001cf4 <HAL_RCC_OscConfig+0x778>)
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	f003 0203 	and.w	r2, r3, #3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d12c      	bne.n	8001c24 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd4:	3b01      	subs	r3, #1
 8001bd6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d123      	bne.n	8001c24 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001be6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d11b      	bne.n	8001c24 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bf6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d113      	bne.n	8001c24 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c06:	085b      	lsrs	r3, r3, #1
 8001c08:	3b01      	subs	r3, #1
 8001c0a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d109      	bne.n	8001c24 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1a:	085b      	lsrs	r3, r3, #1
 8001c1c:	3b01      	subs	r3, #1
 8001c1e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d06b      	beq.n	8001cfc <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	2b0c      	cmp	r3, #12
 8001c28:	d062      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001c2a:	4b32      	ldr	r3, [pc, #200]	; (8001cf4 <HAL_RCC_OscConfig+0x778>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e0ac      	b.n	8001d94 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001c3a:	4b2e      	ldr	r3, [pc, #184]	; (8001cf4 <HAL_RCC_OscConfig+0x778>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a2d      	ldr	r2, [pc, #180]	; (8001cf4 <HAL_RCC_OscConfig+0x778>)
 8001c40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c44:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c46:	f7fe fee9 	bl	8000a1c <HAL_GetTick>
 8001c4a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c4c:	e008      	b.n	8001c60 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c4e:	f7fe fee5 	bl	8000a1c <HAL_GetTick>
 8001c52:	4602      	mov	r2, r0
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d901      	bls.n	8001c60 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e099      	b.n	8001d94 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c60:	4b24      	ldr	r3, [pc, #144]	; (8001cf4 <HAL_RCC_OscConfig+0x778>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d1f0      	bne.n	8001c4e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c6c:	4b21      	ldr	r3, [pc, #132]	; (8001cf4 <HAL_RCC_OscConfig+0x778>)
 8001c6e:	68da      	ldr	r2, [r3, #12]
 8001c70:	4b21      	ldr	r3, [pc, #132]	; (8001cf8 <HAL_RCC_OscConfig+0x77c>)
 8001c72:	4013      	ands	r3, r2
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001c7c:	3a01      	subs	r2, #1
 8001c7e:	0112      	lsls	r2, r2, #4
 8001c80:	4311      	orrs	r1, r2
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c86:	0212      	lsls	r2, r2, #8
 8001c88:	4311      	orrs	r1, r2
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001c8e:	0852      	lsrs	r2, r2, #1
 8001c90:	3a01      	subs	r2, #1
 8001c92:	0552      	lsls	r2, r2, #21
 8001c94:	4311      	orrs	r1, r2
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c9a:	0852      	lsrs	r2, r2, #1
 8001c9c:	3a01      	subs	r2, #1
 8001c9e:	0652      	lsls	r2, r2, #25
 8001ca0:	4311      	orrs	r1, r2
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ca6:	06d2      	lsls	r2, r2, #27
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	4912      	ldr	r1, [pc, #72]	; (8001cf4 <HAL_RCC_OscConfig+0x778>)
 8001cac:	4313      	orrs	r3, r2
 8001cae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001cb0:	4b10      	ldr	r3, [pc, #64]	; (8001cf4 <HAL_RCC_OscConfig+0x778>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a0f      	ldr	r2, [pc, #60]	; (8001cf4 <HAL_RCC_OscConfig+0x778>)
 8001cb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cbc:	4b0d      	ldr	r3, [pc, #52]	; (8001cf4 <HAL_RCC_OscConfig+0x778>)
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	4a0c      	ldr	r2, [pc, #48]	; (8001cf4 <HAL_RCC_OscConfig+0x778>)
 8001cc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cc6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001cc8:	f7fe fea8 	bl	8000a1c <HAL_GetTick>
 8001ccc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cce:	e008      	b.n	8001ce2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cd0:	f7fe fea4 	bl	8000a1c <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e058      	b.n	8001d94 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ce2:	4b04      	ldr	r3, [pc, #16]	; (8001cf4 <HAL_RCC_OscConfig+0x778>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d0f0      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cee:	e050      	b.n	8001d92 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e04f      	b.n	8001d94 <HAL_RCC_OscConfig+0x818>
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cfc:	4b27      	ldr	r3, [pc, #156]	; (8001d9c <HAL_RCC_OscConfig+0x820>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d144      	bne.n	8001d92 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001d08:	4b24      	ldr	r3, [pc, #144]	; (8001d9c <HAL_RCC_OscConfig+0x820>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a23      	ldr	r2, [pc, #140]	; (8001d9c <HAL_RCC_OscConfig+0x820>)
 8001d0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d12:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d14:	4b21      	ldr	r3, [pc, #132]	; (8001d9c <HAL_RCC_OscConfig+0x820>)
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	4a20      	ldr	r2, [pc, #128]	; (8001d9c <HAL_RCC_OscConfig+0x820>)
 8001d1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d1e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d20:	f7fe fe7c 	bl	8000a1c <HAL_GetTick>
 8001d24:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d28:	f7fe fe78 	bl	8000a1c <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e02c      	b.n	8001d94 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d3a:	4b18      	ldr	r3, [pc, #96]	; (8001d9c <HAL_RCC_OscConfig+0x820>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d0f0      	beq.n	8001d28 <HAL_RCC_OscConfig+0x7ac>
 8001d46:	e024      	b.n	8001d92 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d48:	69bb      	ldr	r3, [r7, #24]
 8001d4a:	2b0c      	cmp	r3, #12
 8001d4c:	d01f      	beq.n	8001d8e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d4e:	4b13      	ldr	r3, [pc, #76]	; (8001d9c <HAL_RCC_OscConfig+0x820>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a12      	ldr	r2, [pc, #72]	; (8001d9c <HAL_RCC_OscConfig+0x820>)
 8001d54:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d5a:	f7fe fe5f 	bl	8000a1c <HAL_GetTick>
 8001d5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d60:	e008      	b.n	8001d74 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d62:	f7fe fe5b 	bl	8000a1c <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d901      	bls.n	8001d74 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	e00f      	b.n	8001d94 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d74:	4b09      	ldr	r3, [pc, #36]	; (8001d9c <HAL_RCC_OscConfig+0x820>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d1f0      	bne.n	8001d62 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001d80:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <HAL_RCC_OscConfig+0x820>)
 8001d82:	68da      	ldr	r2, [r3, #12]
 8001d84:	4905      	ldr	r1, [pc, #20]	; (8001d9c <HAL_RCC_OscConfig+0x820>)
 8001d86:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <HAL_RCC_OscConfig+0x824>)
 8001d88:	4013      	ands	r3, r2
 8001d8a:	60cb      	str	r3, [r1, #12]
 8001d8c:	e001      	b.n	8001d92 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e000      	b.n	8001d94 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001d92:	2300      	movs	r3, #0
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3720      	adds	r7, #32
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	feeefffc 	.word	0xfeeefffc

08001da4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d101      	bne.n	8001db8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e0e7      	b.n	8001f88 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001db8:	4b75      	ldr	r3, [pc, #468]	; (8001f90 <HAL_RCC_ClockConfig+0x1ec>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0307 	and.w	r3, r3, #7
 8001dc0:	683a      	ldr	r2, [r7, #0]
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d910      	bls.n	8001de8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dc6:	4b72      	ldr	r3, [pc, #456]	; (8001f90 <HAL_RCC_ClockConfig+0x1ec>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f023 0207 	bic.w	r2, r3, #7
 8001dce:	4970      	ldr	r1, [pc, #448]	; (8001f90 <HAL_RCC_ClockConfig+0x1ec>)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dd6:	4b6e      	ldr	r3, [pc, #440]	; (8001f90 <HAL_RCC_ClockConfig+0x1ec>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0307 	and.w	r3, r3, #7
 8001dde:	683a      	ldr	r2, [r7, #0]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d001      	beq.n	8001de8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e0cf      	b.n	8001f88 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0302 	and.w	r3, r3, #2
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d010      	beq.n	8001e16 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689a      	ldr	r2, [r3, #8]
 8001df8:	4b66      	ldr	r3, [pc, #408]	; (8001f94 <HAL_RCC_ClockConfig+0x1f0>)
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d908      	bls.n	8001e16 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e04:	4b63      	ldr	r3, [pc, #396]	; (8001f94 <HAL_RCC_ClockConfig+0x1f0>)
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	4960      	ldr	r1, [pc, #384]	; (8001f94 <HAL_RCC_ClockConfig+0x1f0>)
 8001e12:	4313      	orrs	r3, r2
 8001e14:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d04c      	beq.n	8001ebc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	2b03      	cmp	r3, #3
 8001e28:	d107      	bne.n	8001e3a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e2a:	4b5a      	ldr	r3, [pc, #360]	; (8001f94 <HAL_RCC_ClockConfig+0x1f0>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d121      	bne.n	8001e7a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e0a6      	b.n	8001f88 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d107      	bne.n	8001e52 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e42:	4b54      	ldr	r3, [pc, #336]	; (8001f94 <HAL_RCC_ClockConfig+0x1f0>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d115      	bne.n	8001e7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e09a      	b.n	8001f88 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d107      	bne.n	8001e6a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e5a:	4b4e      	ldr	r3, [pc, #312]	; (8001f94 <HAL_RCC_ClockConfig+0x1f0>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d109      	bne.n	8001e7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e08e      	b.n	8001f88 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e6a:	4b4a      	ldr	r3, [pc, #296]	; (8001f94 <HAL_RCC_ClockConfig+0x1f0>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d101      	bne.n	8001e7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e086      	b.n	8001f88 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e7a:	4b46      	ldr	r3, [pc, #280]	; (8001f94 <HAL_RCC_ClockConfig+0x1f0>)
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f023 0203 	bic.w	r2, r3, #3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	4943      	ldr	r1, [pc, #268]	; (8001f94 <HAL_RCC_ClockConfig+0x1f0>)
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e8c:	f7fe fdc6 	bl	8000a1c <HAL_GetTick>
 8001e90:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e92:	e00a      	b.n	8001eaa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e94:	f7fe fdc2 	bl	8000a1c <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e06e      	b.n	8001f88 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eaa:	4b3a      	ldr	r3, [pc, #232]	; (8001f94 <HAL_RCC_ClockConfig+0x1f0>)
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f003 020c 	and.w	r2, r3, #12
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d1eb      	bne.n	8001e94 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0302 	and.w	r3, r3, #2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d010      	beq.n	8001eea <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689a      	ldr	r2, [r3, #8]
 8001ecc:	4b31      	ldr	r3, [pc, #196]	; (8001f94 <HAL_RCC_ClockConfig+0x1f0>)
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d208      	bcs.n	8001eea <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ed8:	4b2e      	ldr	r3, [pc, #184]	; (8001f94 <HAL_RCC_ClockConfig+0x1f0>)
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	492b      	ldr	r1, [pc, #172]	; (8001f94 <HAL_RCC_ClockConfig+0x1f0>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001eea:	4b29      	ldr	r3, [pc, #164]	; (8001f90 <HAL_RCC_ClockConfig+0x1ec>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0307 	and.w	r3, r3, #7
 8001ef2:	683a      	ldr	r2, [r7, #0]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d210      	bcs.n	8001f1a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ef8:	4b25      	ldr	r3, [pc, #148]	; (8001f90 <HAL_RCC_ClockConfig+0x1ec>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f023 0207 	bic.w	r2, r3, #7
 8001f00:	4923      	ldr	r1, [pc, #140]	; (8001f90 <HAL_RCC_ClockConfig+0x1ec>)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f08:	4b21      	ldr	r3, [pc, #132]	; (8001f90 <HAL_RCC_ClockConfig+0x1ec>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0307 	and.w	r3, r3, #7
 8001f10:	683a      	ldr	r2, [r7, #0]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d001      	beq.n	8001f1a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e036      	b.n	8001f88 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0304 	and.w	r3, r3, #4
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d008      	beq.n	8001f38 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f26:	4b1b      	ldr	r3, [pc, #108]	; (8001f94 <HAL_RCC_ClockConfig+0x1f0>)
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	4918      	ldr	r1, [pc, #96]	; (8001f94 <HAL_RCC_ClockConfig+0x1f0>)
 8001f34:	4313      	orrs	r3, r2
 8001f36:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0308 	and.w	r3, r3, #8
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d009      	beq.n	8001f58 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f44:	4b13      	ldr	r3, [pc, #76]	; (8001f94 <HAL_RCC_ClockConfig+0x1f0>)
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	691b      	ldr	r3, [r3, #16]
 8001f50:	00db      	lsls	r3, r3, #3
 8001f52:	4910      	ldr	r1, [pc, #64]	; (8001f94 <HAL_RCC_ClockConfig+0x1f0>)
 8001f54:	4313      	orrs	r3, r2
 8001f56:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f58:	f000 f824 	bl	8001fa4 <HAL_RCC_GetSysClockFreq>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	4b0d      	ldr	r3, [pc, #52]	; (8001f94 <HAL_RCC_ClockConfig+0x1f0>)
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	091b      	lsrs	r3, r3, #4
 8001f64:	f003 030f 	and.w	r3, r3, #15
 8001f68:	490b      	ldr	r1, [pc, #44]	; (8001f98 <HAL_RCC_ClockConfig+0x1f4>)
 8001f6a:	5ccb      	ldrb	r3, [r1, r3]
 8001f6c:	f003 031f 	and.w	r3, r3, #31
 8001f70:	fa22 f303 	lsr.w	r3, r2, r3
 8001f74:	4a09      	ldr	r2, [pc, #36]	; (8001f9c <HAL_RCC_ClockConfig+0x1f8>)
 8001f76:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f78:	4b09      	ldr	r3, [pc, #36]	; (8001fa0 <HAL_RCC_ClockConfig+0x1fc>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7fe fcfd 	bl	800097c <HAL_InitTick>
 8001f82:	4603      	mov	r3, r0
 8001f84:	72fb      	strb	r3, [r7, #11]

  return status;
 8001f86:	7afb      	ldrb	r3, [r7, #11]
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3710      	adds	r7, #16
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	40022000 	.word	0x40022000
 8001f94:	40021000 	.word	0x40021000
 8001f98:	08002f04 	.word	0x08002f04
 8001f9c:	20000000 	.word	0x20000000
 8001fa0:	20000004 	.word	0x20000004

08001fa4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b089      	sub	sp, #36	; 0x24
 8001fa8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001faa:	2300      	movs	r3, #0
 8001fac:	61fb      	str	r3, [r7, #28]
 8001fae:	2300      	movs	r3, #0
 8001fb0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fb2:	4b3e      	ldr	r3, [pc, #248]	; (80020ac <HAL_RCC_GetSysClockFreq+0x108>)
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f003 030c 	and.w	r3, r3, #12
 8001fba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fbc:	4b3b      	ldr	r3, [pc, #236]	; (80020ac <HAL_RCC_GetSysClockFreq+0x108>)
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	f003 0303 	and.w	r3, r3, #3
 8001fc4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d005      	beq.n	8001fd8 <HAL_RCC_GetSysClockFreq+0x34>
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	2b0c      	cmp	r3, #12
 8001fd0:	d121      	bne.n	8002016 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d11e      	bne.n	8002016 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001fd8:	4b34      	ldr	r3, [pc, #208]	; (80020ac <HAL_RCC_GetSysClockFreq+0x108>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0308 	and.w	r3, r3, #8
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d107      	bne.n	8001ff4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001fe4:	4b31      	ldr	r3, [pc, #196]	; (80020ac <HAL_RCC_GetSysClockFreq+0x108>)
 8001fe6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fea:	0a1b      	lsrs	r3, r3, #8
 8001fec:	f003 030f 	and.w	r3, r3, #15
 8001ff0:	61fb      	str	r3, [r7, #28]
 8001ff2:	e005      	b.n	8002000 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ff4:	4b2d      	ldr	r3, [pc, #180]	; (80020ac <HAL_RCC_GetSysClockFreq+0x108>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	091b      	lsrs	r3, r3, #4
 8001ffa:	f003 030f 	and.w	r3, r3, #15
 8001ffe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002000:	4a2b      	ldr	r2, [pc, #172]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002008:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d10d      	bne.n	800202c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002014:	e00a      	b.n	800202c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	2b04      	cmp	r3, #4
 800201a:	d102      	bne.n	8002022 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800201c:	4b25      	ldr	r3, [pc, #148]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800201e:	61bb      	str	r3, [r7, #24]
 8002020:	e004      	b.n	800202c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	2b08      	cmp	r3, #8
 8002026:	d101      	bne.n	800202c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002028:	4b23      	ldr	r3, [pc, #140]	; (80020b8 <HAL_RCC_GetSysClockFreq+0x114>)
 800202a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	2b0c      	cmp	r3, #12
 8002030:	d134      	bne.n	800209c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002032:	4b1e      	ldr	r3, [pc, #120]	; (80020ac <HAL_RCC_GetSysClockFreq+0x108>)
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	f003 0303 	and.w	r3, r3, #3
 800203a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	2b02      	cmp	r3, #2
 8002040:	d003      	beq.n	800204a <HAL_RCC_GetSysClockFreq+0xa6>
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	2b03      	cmp	r3, #3
 8002046:	d003      	beq.n	8002050 <HAL_RCC_GetSysClockFreq+0xac>
 8002048:	e005      	b.n	8002056 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800204a:	4b1a      	ldr	r3, [pc, #104]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800204c:	617b      	str	r3, [r7, #20]
      break;
 800204e:	e005      	b.n	800205c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002050:	4b19      	ldr	r3, [pc, #100]	; (80020b8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002052:	617b      	str	r3, [r7, #20]
      break;
 8002054:	e002      	b.n	800205c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	617b      	str	r3, [r7, #20]
      break;
 800205a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800205c:	4b13      	ldr	r3, [pc, #76]	; (80020ac <HAL_RCC_GetSysClockFreq+0x108>)
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	091b      	lsrs	r3, r3, #4
 8002062:	f003 0307 	and.w	r3, r3, #7
 8002066:	3301      	adds	r3, #1
 8002068:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800206a:	4b10      	ldr	r3, [pc, #64]	; (80020ac <HAL_RCC_GetSysClockFreq+0x108>)
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	0a1b      	lsrs	r3, r3, #8
 8002070:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002074:	697a      	ldr	r2, [r7, #20]
 8002076:	fb03 f202 	mul.w	r2, r3, r2
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002080:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002082:	4b0a      	ldr	r3, [pc, #40]	; (80020ac <HAL_RCC_GetSysClockFreq+0x108>)
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	0e5b      	lsrs	r3, r3, #25
 8002088:	f003 0303 	and.w	r3, r3, #3
 800208c:	3301      	adds	r3, #1
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002092:	697a      	ldr	r2, [r7, #20]
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	fbb2 f3f3 	udiv	r3, r2, r3
 800209a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800209c:	69bb      	ldr	r3, [r7, #24]
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3724      	adds	r7, #36	; 0x24
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	40021000 	.word	0x40021000
 80020b0:	08002f14 	.word	0x08002f14
 80020b4:	00f42400 	.word	0x00f42400
 80020b8:	007a1200 	.word	0x007a1200

080020bc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b086      	sub	sp, #24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80020c4:	2300      	movs	r3, #0
 80020c6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80020c8:	4b2a      	ldr	r3, [pc, #168]	; (8002174 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d003      	beq.n	80020dc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80020d4:	f7ff f9ee 	bl	80014b4 <HAL_PWREx_GetVoltageRange>
 80020d8:	6178      	str	r0, [r7, #20]
 80020da:	e014      	b.n	8002106 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80020dc:	4b25      	ldr	r3, [pc, #148]	; (8002174 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e0:	4a24      	ldr	r2, [pc, #144]	; (8002174 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020e6:	6593      	str	r3, [r2, #88]	; 0x58
 80020e8:	4b22      	ldr	r3, [pc, #136]	; (8002174 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f0:	60fb      	str	r3, [r7, #12]
 80020f2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80020f4:	f7ff f9de 	bl	80014b4 <HAL_PWREx_GetVoltageRange>
 80020f8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80020fa:	4b1e      	ldr	r3, [pc, #120]	; (8002174 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020fe:	4a1d      	ldr	r2, [pc, #116]	; (8002174 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002100:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002104:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800210c:	d10b      	bne.n	8002126 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2b80      	cmp	r3, #128	; 0x80
 8002112:	d919      	bls.n	8002148 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2ba0      	cmp	r3, #160	; 0xa0
 8002118:	d902      	bls.n	8002120 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800211a:	2302      	movs	r3, #2
 800211c:	613b      	str	r3, [r7, #16]
 800211e:	e013      	b.n	8002148 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002120:	2301      	movs	r3, #1
 8002122:	613b      	str	r3, [r7, #16]
 8002124:	e010      	b.n	8002148 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2b80      	cmp	r3, #128	; 0x80
 800212a:	d902      	bls.n	8002132 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800212c:	2303      	movs	r3, #3
 800212e:	613b      	str	r3, [r7, #16]
 8002130:	e00a      	b.n	8002148 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2b80      	cmp	r3, #128	; 0x80
 8002136:	d102      	bne.n	800213e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002138:	2302      	movs	r3, #2
 800213a:	613b      	str	r3, [r7, #16]
 800213c:	e004      	b.n	8002148 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2b70      	cmp	r3, #112	; 0x70
 8002142:	d101      	bne.n	8002148 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002144:	2301      	movs	r3, #1
 8002146:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002148:	4b0b      	ldr	r3, [pc, #44]	; (8002178 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f023 0207 	bic.w	r2, r3, #7
 8002150:	4909      	ldr	r1, [pc, #36]	; (8002178 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	4313      	orrs	r3, r2
 8002156:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002158:	4b07      	ldr	r3, [pc, #28]	; (8002178 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0307 	and.w	r3, r3, #7
 8002160:	693a      	ldr	r2, [r7, #16]
 8002162:	429a      	cmp	r2, r3
 8002164:	d001      	beq.n	800216a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e000      	b.n	800216c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800216a:	2300      	movs	r3, #0
}
 800216c:	4618      	mov	r0, r3
 800216e:	3718      	adds	r7, #24
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	40021000 	.word	0x40021000
 8002178:	40022000 	.word	0x40022000

0800217c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b086      	sub	sp, #24
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002184:	2300      	movs	r3, #0
 8002186:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002188:	2300      	movs	r3, #0
 800218a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002194:	2b00      	cmp	r3, #0
 8002196:	d031      	beq.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800219c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80021a0:	d01a      	beq.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80021a2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80021a6:	d814      	bhi.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d009      	beq.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80021ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80021b0:	d10f      	bne.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80021b2:	4b5d      	ldr	r3, [pc, #372]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	4a5c      	ldr	r2, [pc, #368]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021bc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021be:	e00c      	b.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	3304      	adds	r3, #4
 80021c4:	2100      	movs	r1, #0
 80021c6:	4618      	mov	r0, r3
 80021c8:	f000 f9ce 	bl	8002568 <RCCEx_PLLSAI1_Config>
 80021cc:	4603      	mov	r3, r0
 80021ce:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021d0:	e003      	b.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	74fb      	strb	r3, [r7, #19]
      break;
 80021d6:	e000      	b.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80021d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80021da:	7cfb      	ldrb	r3, [r7, #19]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d10b      	bne.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80021e0:	4b51      	ldr	r3, [pc, #324]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021e6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ee:	494e      	ldr	r1, [pc, #312]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80021f6:	e001      	b.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021f8:	7cfb      	ldrb	r3, [r7, #19]
 80021fa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002204:	2b00      	cmp	r3, #0
 8002206:	f000 809e 	beq.w	8002346 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800220a:	2300      	movs	r3, #0
 800220c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800220e:	4b46      	ldr	r3, [pc, #280]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800221a:	2301      	movs	r3, #1
 800221c:	e000      	b.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800221e:	2300      	movs	r3, #0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d00d      	beq.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002224:	4b40      	ldr	r3, [pc, #256]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002228:	4a3f      	ldr	r2, [pc, #252]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800222a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800222e:	6593      	str	r3, [r2, #88]	; 0x58
 8002230:	4b3d      	ldr	r3, [pc, #244]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002234:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002238:	60bb      	str	r3, [r7, #8]
 800223a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800223c:	2301      	movs	r3, #1
 800223e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002240:	4b3a      	ldr	r3, [pc, #232]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a39      	ldr	r2, [pc, #228]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002246:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800224a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800224c:	f7fe fbe6 	bl	8000a1c <HAL_GetTick>
 8002250:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002252:	e009      	b.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002254:	f7fe fbe2 	bl	8000a1c <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b02      	cmp	r3, #2
 8002260:	d902      	bls.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	74fb      	strb	r3, [r7, #19]
        break;
 8002266:	e005      	b.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002268:	4b30      	ldr	r3, [pc, #192]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002270:	2b00      	cmp	r3, #0
 8002272:	d0ef      	beq.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002274:	7cfb      	ldrb	r3, [r7, #19]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d15a      	bne.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800227a:	4b2b      	ldr	r3, [pc, #172]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800227c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002280:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002284:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d01e      	beq.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002290:	697a      	ldr	r2, [r7, #20]
 8002292:	429a      	cmp	r2, r3
 8002294:	d019      	beq.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002296:	4b24      	ldr	r3, [pc, #144]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800229c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022a0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80022a2:	4b21      	ldr	r3, [pc, #132]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022a8:	4a1f      	ldr	r2, [pc, #124]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80022b2:	4b1d      	ldr	r3, [pc, #116]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022b8:	4a1b      	ldr	r2, [pc, #108]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80022c2:	4a19      	ldr	r2, [pc, #100]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	f003 0301 	and.w	r3, r3, #1
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d016      	beq.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d4:	f7fe fba2 	bl	8000a1c <HAL_GetTick>
 80022d8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022da:	e00b      	b.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022dc:	f7fe fb9e 	bl	8000a1c <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d902      	bls.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	74fb      	strb	r3, [r7, #19]
            break;
 80022f2:	e006      	b.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022f4:	4b0c      	ldr	r3, [pc, #48]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d0ec      	beq.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002302:	7cfb      	ldrb	r3, [r7, #19]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d10b      	bne.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002308:	4b07      	ldr	r3, [pc, #28]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800230a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800230e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002316:	4904      	ldr	r1, [pc, #16]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002318:	4313      	orrs	r3, r2
 800231a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800231e:	e009      	b.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002320:	7cfb      	ldrb	r3, [r7, #19]
 8002322:	74bb      	strb	r3, [r7, #18]
 8002324:	e006      	b.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002326:	bf00      	nop
 8002328:	40021000 	.word	0x40021000
 800232c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002330:	7cfb      	ldrb	r3, [r7, #19]
 8002332:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002334:	7c7b      	ldrb	r3, [r7, #17]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d105      	bne.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800233a:	4b8a      	ldr	r3, [pc, #552]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800233c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800233e:	4a89      	ldr	r2, [pc, #548]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002340:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002344:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0301 	and.w	r3, r3, #1
 800234e:	2b00      	cmp	r3, #0
 8002350:	d00a      	beq.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002352:	4b84      	ldr	r3, [pc, #528]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002354:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002358:	f023 0203 	bic.w	r2, r3, #3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a1b      	ldr	r3, [r3, #32]
 8002360:	4980      	ldr	r1, [pc, #512]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002362:	4313      	orrs	r3, r2
 8002364:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	2b00      	cmp	r3, #0
 8002372:	d00a      	beq.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002374:	4b7b      	ldr	r3, [pc, #492]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800237a:	f023 020c 	bic.w	r2, r3, #12
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002382:	4978      	ldr	r1, [pc, #480]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002384:	4313      	orrs	r3, r2
 8002386:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0320 	and.w	r3, r3, #32
 8002392:	2b00      	cmp	r3, #0
 8002394:	d00a      	beq.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002396:	4b73      	ldr	r3, [pc, #460]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800239c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a4:	496f      	ldr	r1, [pc, #444]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d00a      	beq.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80023b8:	4b6a      	ldr	r3, [pc, #424]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023be:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023c6:	4967      	ldr	r1, [pc, #412]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d00a      	beq.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80023da:	4b62      	ldr	r3, [pc, #392]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023e8:	495e      	ldr	r1, [pc, #376]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d00a      	beq.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023fc:	4b59      	ldr	r3, [pc, #356]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002402:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800240a:	4956      	ldr	r1, [pc, #344]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800240c:	4313      	orrs	r3, r2
 800240e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800241a:	2b00      	cmp	r3, #0
 800241c:	d00a      	beq.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800241e:	4b51      	ldr	r3, [pc, #324]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002424:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242c:	494d      	ldr	r1, [pc, #308]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800242e:	4313      	orrs	r3, r2
 8002430:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d028      	beq.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002440:	4b48      	ldr	r3, [pc, #288]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002446:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244e:	4945      	ldr	r1, [pc, #276]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002450:	4313      	orrs	r3, r2
 8002452:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800245e:	d106      	bne.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002460:	4b40      	ldr	r3, [pc, #256]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	4a3f      	ldr	r2, [pc, #252]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002466:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800246a:	60d3      	str	r3, [r2, #12]
 800246c:	e011      	b.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002472:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002476:	d10c      	bne.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	3304      	adds	r3, #4
 800247c:	2101      	movs	r1, #1
 800247e:	4618      	mov	r0, r3
 8002480:	f000 f872 	bl	8002568 <RCCEx_PLLSAI1_Config>
 8002484:	4603      	mov	r3, r0
 8002486:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002488:	7cfb      	ldrb	r3, [r7, #19]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800248e:	7cfb      	ldrb	r3, [r7, #19]
 8002490:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d028      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800249e:	4b31      	ldr	r3, [pc, #196]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024a4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ac:	492d      	ldr	r1, [pc, #180]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024bc:	d106      	bne.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024be:	4b29      	ldr	r3, [pc, #164]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	4a28      	ldr	r2, [pc, #160]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024c8:	60d3      	str	r3, [r2, #12]
 80024ca:	e011      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024d4:	d10c      	bne.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	3304      	adds	r3, #4
 80024da:	2101      	movs	r1, #1
 80024dc:	4618      	mov	r0, r3
 80024de:	f000 f843 	bl	8002568 <RCCEx_PLLSAI1_Config>
 80024e2:	4603      	mov	r3, r0
 80024e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024e6:	7cfb      	ldrb	r3, [r7, #19]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80024ec:	7cfb      	ldrb	r3, [r7, #19]
 80024ee:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d01c      	beq.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80024fc:	4b19      	ldr	r3, [pc, #100]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002502:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800250a:	4916      	ldr	r1, [pc, #88]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800250c:	4313      	orrs	r3, r2
 800250e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002516:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800251a:	d10c      	bne.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3304      	adds	r3, #4
 8002520:	2102      	movs	r1, #2
 8002522:	4618      	mov	r0, r3
 8002524:	f000 f820 	bl	8002568 <RCCEx_PLLSAI1_Config>
 8002528:	4603      	mov	r3, r0
 800252a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800252c:	7cfb      	ldrb	r3, [r7, #19]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002532:	7cfb      	ldrb	r3, [r7, #19]
 8002534:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d00a      	beq.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002542:	4b08      	ldr	r3, [pc, #32]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002544:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002548:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002550:	4904      	ldr	r1, [pc, #16]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002552:	4313      	orrs	r3, r2
 8002554:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002558:	7cbb      	ldrb	r3, [r7, #18]
}
 800255a:	4618      	mov	r0, r3
 800255c:	3718      	adds	r7, #24
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	40021000 	.word	0x40021000

08002568 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002572:	2300      	movs	r3, #0
 8002574:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002576:	4b74      	ldr	r3, [pc, #464]	; (8002748 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	f003 0303 	and.w	r3, r3, #3
 800257e:	2b00      	cmp	r3, #0
 8002580:	d018      	beq.n	80025b4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002582:	4b71      	ldr	r3, [pc, #452]	; (8002748 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	f003 0203 	and.w	r2, r3, #3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	429a      	cmp	r2, r3
 8002590:	d10d      	bne.n	80025ae <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
       ||
 8002596:	2b00      	cmp	r3, #0
 8002598:	d009      	beq.n	80025ae <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800259a:	4b6b      	ldr	r3, [pc, #428]	; (8002748 <RCCEx_PLLSAI1_Config+0x1e0>)
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	091b      	lsrs	r3, r3, #4
 80025a0:	f003 0307 	and.w	r3, r3, #7
 80025a4:	1c5a      	adds	r2, r3, #1
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
       ||
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d047      	beq.n	800263e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	73fb      	strb	r3, [r7, #15]
 80025b2:	e044      	b.n	800263e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2b03      	cmp	r3, #3
 80025ba:	d018      	beq.n	80025ee <RCCEx_PLLSAI1_Config+0x86>
 80025bc:	2b03      	cmp	r3, #3
 80025be:	d825      	bhi.n	800260c <RCCEx_PLLSAI1_Config+0xa4>
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d002      	beq.n	80025ca <RCCEx_PLLSAI1_Config+0x62>
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d009      	beq.n	80025dc <RCCEx_PLLSAI1_Config+0x74>
 80025c8:	e020      	b.n	800260c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80025ca:	4b5f      	ldr	r3, [pc, #380]	; (8002748 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d11d      	bne.n	8002612 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025da:	e01a      	b.n	8002612 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80025dc:	4b5a      	ldr	r3, [pc, #360]	; (8002748 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d116      	bne.n	8002616 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025ec:	e013      	b.n	8002616 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80025ee:	4b56      	ldr	r3, [pc, #344]	; (8002748 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d10f      	bne.n	800261a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80025fa:	4b53      	ldr	r3, [pc, #332]	; (8002748 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d109      	bne.n	800261a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800260a:	e006      	b.n	800261a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	73fb      	strb	r3, [r7, #15]
      break;
 8002610:	e004      	b.n	800261c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002612:	bf00      	nop
 8002614:	e002      	b.n	800261c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002616:	bf00      	nop
 8002618:	e000      	b.n	800261c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800261a:	bf00      	nop
    }

    if(status == HAL_OK)
 800261c:	7bfb      	ldrb	r3, [r7, #15]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d10d      	bne.n	800263e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002622:	4b49      	ldr	r3, [pc, #292]	; (8002748 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6819      	ldr	r1, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	3b01      	subs	r3, #1
 8002634:	011b      	lsls	r3, r3, #4
 8002636:	430b      	orrs	r3, r1
 8002638:	4943      	ldr	r1, [pc, #268]	; (8002748 <RCCEx_PLLSAI1_Config+0x1e0>)
 800263a:	4313      	orrs	r3, r2
 800263c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800263e:	7bfb      	ldrb	r3, [r7, #15]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d17c      	bne.n	800273e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002644:	4b40      	ldr	r3, [pc, #256]	; (8002748 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a3f      	ldr	r2, [pc, #252]	; (8002748 <RCCEx_PLLSAI1_Config+0x1e0>)
 800264a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800264e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002650:	f7fe f9e4 	bl	8000a1c <HAL_GetTick>
 8002654:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002656:	e009      	b.n	800266c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002658:	f7fe f9e0 	bl	8000a1c <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b02      	cmp	r3, #2
 8002664:	d902      	bls.n	800266c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	73fb      	strb	r3, [r7, #15]
        break;
 800266a:	e005      	b.n	8002678 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800266c:	4b36      	ldr	r3, [pc, #216]	; (8002748 <RCCEx_PLLSAI1_Config+0x1e0>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d1ef      	bne.n	8002658 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002678:	7bfb      	ldrb	r3, [r7, #15]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d15f      	bne.n	800273e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d110      	bne.n	80026a6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002684:	4b30      	ldr	r3, [pc, #192]	; (8002748 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002686:	691b      	ldr	r3, [r3, #16]
 8002688:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800268c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	6892      	ldr	r2, [r2, #8]
 8002694:	0211      	lsls	r1, r2, #8
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	68d2      	ldr	r2, [r2, #12]
 800269a:	06d2      	lsls	r2, r2, #27
 800269c:	430a      	orrs	r2, r1
 800269e:	492a      	ldr	r1, [pc, #168]	; (8002748 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	610b      	str	r3, [r1, #16]
 80026a4:	e027      	b.n	80026f6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d112      	bne.n	80026d2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026ac:	4b26      	ldr	r3, [pc, #152]	; (8002748 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026ae:	691b      	ldr	r3, [r3, #16]
 80026b0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80026b4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	6892      	ldr	r2, [r2, #8]
 80026bc:	0211      	lsls	r1, r2, #8
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	6912      	ldr	r2, [r2, #16]
 80026c2:	0852      	lsrs	r2, r2, #1
 80026c4:	3a01      	subs	r2, #1
 80026c6:	0552      	lsls	r2, r2, #21
 80026c8:	430a      	orrs	r2, r1
 80026ca:	491f      	ldr	r1, [pc, #124]	; (8002748 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	610b      	str	r3, [r1, #16]
 80026d0:	e011      	b.n	80026f6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026d2:	4b1d      	ldr	r3, [pc, #116]	; (8002748 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80026da:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	6892      	ldr	r2, [r2, #8]
 80026e2:	0211      	lsls	r1, r2, #8
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	6952      	ldr	r2, [r2, #20]
 80026e8:	0852      	lsrs	r2, r2, #1
 80026ea:	3a01      	subs	r2, #1
 80026ec:	0652      	lsls	r2, r2, #25
 80026ee:	430a      	orrs	r2, r1
 80026f0:	4915      	ldr	r1, [pc, #84]	; (8002748 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80026f6:	4b14      	ldr	r3, [pc, #80]	; (8002748 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a13      	ldr	r2, [pc, #76]	; (8002748 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002700:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002702:	f7fe f98b 	bl	8000a1c <HAL_GetTick>
 8002706:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002708:	e009      	b.n	800271e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800270a:	f7fe f987 	bl	8000a1c <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	2b02      	cmp	r3, #2
 8002716:	d902      	bls.n	800271e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	73fb      	strb	r3, [r7, #15]
          break;
 800271c:	e005      	b.n	800272a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800271e:	4b0a      	ldr	r3, [pc, #40]	; (8002748 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d0ef      	beq.n	800270a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800272a:	7bfb      	ldrb	r3, [r7, #15]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d106      	bne.n	800273e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002730:	4b05      	ldr	r3, [pc, #20]	; (8002748 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002732:	691a      	ldr	r2, [r3, #16]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	699b      	ldr	r3, [r3, #24]
 8002738:	4903      	ldr	r1, [pc, #12]	; (8002748 <RCCEx_PLLSAI1_Config+0x1e0>)
 800273a:	4313      	orrs	r3, r2
 800273c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800273e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002740:	4618      	mov	r0, r3
 8002742:	3710      	adds	r7, #16
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	40021000 	.word	0x40021000

0800274c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d101      	bne.n	800275e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e049      	b.n	80027f2 <HAL_RNG_Init+0xa6>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	795b      	ldrb	r3, [r3, #5]
 8002762:	b2db      	uxtb	r3, r3
 8002764:	2b00      	cmp	r3, #0
 8002766:	d105      	bne.n	8002774 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f7fd ffca 	bl	8000708 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2202      	movs	r2, #2
 8002778:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* defined(RNG_CR_CED) */
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f042 0204 	orr.w	r2, r2, #4
 8002788:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002794:	2b40      	cmp	r3, #64	; 0x40
 8002796:	d104      	bne.n	80027a2 <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2204      	movs	r2, #4
 800279c:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e027      	b.n	80027f2 <HAL_RNG_Init+0xa6>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 80027a2:	f7fe f93b 	bl	8000a1c <HAL_GetTick>
 80027a6:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80027a8:	e015      	b.n	80027d6 <HAL_RNG_Init+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80027aa:	f7fe f937 	bl	8000a1c <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d90e      	bls.n	80027d6 <HAL_RNG_Init+0x8a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f003 0304 	and.w	r3, r3, #4
 80027c2:	2b04      	cmp	r3, #4
 80027c4:	d107      	bne.n	80027d6 <HAL_RNG_Init+0x8a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2204      	movs	r2, #4
 80027ca:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2202      	movs	r2, #2
 80027d0:	609a      	str	r2, [r3, #8]
        return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e00d      	b.n	80027f2 <HAL_RNG_Init+0xa6>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f003 0304 	and.w	r3, r3, #4
 80027e0:	2b04      	cmp	r3, #4
 80027e2:	d0e2      	beq.n	80027aa <HAL_RNG_Init+0x5e>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3710      	adds	r7, #16
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b084      	sub	sp, #16
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d06c      	beq.n	80028e6 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002812:	b2db      	uxtb	r3, r3
 8002814:	2b00      	cmp	r3, #0
 8002816:	d106      	bne.n	8002826 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f7fd ffb5 	bl	8000790 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2202      	movs	r2, #2
 800282a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	22ca      	movs	r2, #202	; 0xca
 8002834:	625a      	str	r2, [r3, #36]	; 0x24
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2253      	movs	r2, #83	; 0x53
 800283c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f000 f9a0 	bl	8002b84 <RTC_EnterInitMode>
 8002844:	4603      	mov	r3, r0
 8002846:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002848:	7bfb      	ldrb	r3, [r7, #15]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d14b      	bne.n	80028e6 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	6812      	ldr	r2, [r2, #0]
 8002858:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800285c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002860:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	6899      	ldr	r1, [r3, #8]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685a      	ldr	r2, [r3, #4]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	431a      	orrs	r2, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	431a      	orrs	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	430a      	orrs	r2, r1
 800287e:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	68d2      	ldr	r2, [r2, #12]
 8002888:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	6919      	ldr	r1, [r3, #16]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	041a      	lsls	r2, r3, #16
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	430a      	orrs	r2, r1
 800289c:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f000 f9a4 	bl	8002bec <RTC_ExitInitMode>
 80028a4:	4603      	mov	r3, r0
 80028a6:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80028a8:	7bfb      	ldrb	r3, [r7, #15]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d11b      	bne.n	80028e6 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f022 0203 	bic.w	r2, r2, #3
 80028bc:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	69da      	ldr	r2, [r3, #28]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	695b      	ldr	r3, [r3, #20]
 80028cc:	431a      	orrs	r2, r3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	430a      	orrs	r2, r1
 80028d4:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	22ff      	movs	r2, #255	; 0xff
 80028dc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2201      	movs	r2, #1
 80028e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 80028e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3710      	adds	r7, #16
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80028f0:	b590      	push	{r4, r7, lr}
 80028f2:	b087      	sub	sp, #28
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002902:	2b01      	cmp	r3, #1
 8002904:	d101      	bne.n	800290a <HAL_RTC_SetTime+0x1a>
 8002906:	2302      	movs	r3, #2
 8002908:	e08b      	b.n	8002a22 <HAL_RTC_SetTime+0x132>
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2201      	movs	r2, #1
 800290e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2202      	movs	r2, #2
 8002916:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	22ca      	movs	r2, #202	; 0xca
 8002920:	625a      	str	r2, [r3, #36]	; 0x24
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2253      	movs	r2, #83	; 0x53
 8002928:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800292a:	68f8      	ldr	r0, [r7, #12]
 800292c:	f000 f92a 	bl	8002b84 <RTC_EnterInitMode>
 8002930:	4603      	mov	r3, r0
 8002932:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8002934:	7cfb      	ldrb	r3, [r7, #19]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d163      	bne.n	8002a02 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d126      	bne.n	800298e <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800294a:	2b00      	cmp	r3, #0
 800294c:	d102      	bne.n	8002954 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	2200      	movs	r2, #0
 8002952:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	4618      	mov	r0, r3
 800295a:	f000 f985 	bl	8002c68 <RTC_ByteToBcd2>
 800295e:	4603      	mov	r3, r0
 8002960:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	785b      	ldrb	r3, [r3, #1]
 8002966:	4618      	mov	r0, r3
 8002968:	f000 f97e 	bl	8002c68 <RTC_ByteToBcd2>
 800296c:	4603      	mov	r3, r0
 800296e:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002970:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	789b      	ldrb	r3, [r3, #2]
 8002976:	4618      	mov	r0, r3
 8002978:	f000 f976 	bl	8002c68 <RTC_ByteToBcd2>
 800297c:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800297e:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	78db      	ldrb	r3, [r3, #3]
 8002986:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002988:	4313      	orrs	r3, r2
 800298a:	617b      	str	r3, [r7, #20]
 800298c:	e018      	b.n	80029c0 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002998:	2b00      	cmp	r3, #0
 800299a:	d102      	bne.n	80029a2 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	2200      	movs	r2, #0
 80029a0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	785b      	ldrb	r3, [r3, #1]
 80029ac:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80029ae:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80029b0:	68ba      	ldr	r2, [r7, #8]
 80029b2:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80029b4:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	78db      	ldrb	r3, [r3, #3]
 80029ba:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80029bc:	4313      	orrs	r3, r2
 80029be:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80029ca:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80029ce:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	689a      	ldr	r2, [r3, #8]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80029de:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	6899      	ldr	r1, [r3, #8]
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	68da      	ldr	r2, [r3, #12]
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	431a      	orrs	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	430a      	orrs	r2, r1
 80029f6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80029f8:	68f8      	ldr	r0, [r7, #12]
 80029fa:	f000 f8f7 	bl	8002bec <RTC_ExitInitMode>
 80029fe:	4603      	mov	r3, r0
 8002a00:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	22ff      	movs	r2, #255	; 0xff
 8002a08:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8002a0a:	7cfb      	ldrb	r3, [r7, #19]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d103      	bne.n	8002a18 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8002a20:	7cfb      	ldrb	r3, [r7, #19]
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	371c      	adds	r7, #28
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd90      	pop	{r4, r7, pc}

08002a2a <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002a2a:	b590      	push	{r4, r7, lr}
 8002a2c:	b087      	sub	sp, #28
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	60f8      	str	r0, [r7, #12]
 8002a32:	60b9      	str	r1, [r7, #8]
 8002a34:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d101      	bne.n	8002a44 <HAL_RTC_SetDate+0x1a>
 8002a40:	2302      	movs	r3, #2
 8002a42:	e075      	b.n	8002b30 <HAL_RTC_SetDate+0x106>
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2202      	movs	r2, #2
 8002a50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d10e      	bne.n	8002a78 <HAL_RTC_SetDate+0x4e>
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	785b      	ldrb	r3, [r3, #1]
 8002a5e:	f003 0310 	and.w	r3, r3, #16
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d008      	beq.n	8002a78 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	785b      	ldrb	r3, [r3, #1]
 8002a6a:	f023 0310 	bic.w	r3, r3, #16
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	330a      	adds	r3, #10
 8002a72:	b2da      	uxtb	r2, r3
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d11c      	bne.n	8002ab8 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	78db      	ldrb	r3, [r3, #3]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f000 f8f0 	bl	8002c68 <RTC_ByteToBcd2>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	785b      	ldrb	r3, [r3, #1]
 8002a90:	4618      	mov	r0, r3
 8002a92:	f000 f8e9 	bl	8002c68 <RTC_ByteToBcd2>
 8002a96:	4603      	mov	r3, r0
 8002a98:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002a9a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	789b      	ldrb	r3, [r3, #2]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f000 f8e1 	bl	8002c68 <RTC_ByteToBcd2>
 8002aa6:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002aa8:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	617b      	str	r3, [r7, #20]
 8002ab6:	e00e      	b.n	8002ad6 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	78db      	ldrb	r3, [r3, #3]
 8002abc:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	785b      	ldrb	r3, [r3, #1]
 8002ac2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002ac4:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8002ac6:	68ba      	ldr	r2, [r7, #8]
 8002ac8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002aca:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	22ca      	movs	r2, #202	; 0xca
 8002adc:	625a      	str	r2, [r3, #36]	; 0x24
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2253      	movs	r2, #83	; 0x53
 8002ae4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002ae6:	68f8      	ldr	r0, [r7, #12]
 8002ae8:	f000 f84c 	bl	8002b84 <RTC_EnterInitMode>
 8002aec:	4603      	mov	r3, r0
 8002aee:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8002af0:	7cfb      	ldrb	r3, [r7, #19]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d10c      	bne.n	8002b10 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002b00:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002b04:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002b06:	68f8      	ldr	r0, [r7, #12]
 8002b08:	f000 f870 	bl	8002bec <RTC_ExitInitMode>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	22ff      	movs	r2, #255	; 0xff
 8002b16:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8002b18:	7cfb      	ldrb	r3, [r7, #19]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d103      	bne.n	8002b26 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2201      	movs	r2, #1
 8002b22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8002b2e:	7cfb      	ldrb	r3, [r7, #19]
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	371c      	adds	r7, #28
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd90      	pop	{r4, r7, pc}

08002b38 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	68da      	ldr	r2, [r3, #12]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002b4e:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8002b50:	f7fd ff64 	bl	8000a1c <HAL_GetTick>
 8002b54:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002b56:	e009      	b.n	8002b6c <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002b58:	f7fd ff60 	bl	8000a1c <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b66:	d901      	bls.n	8002b6c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e007      	b.n	8002b7c <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	f003 0320 	and.w	r3, r3, #32
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d0ee      	beq.n	8002b58 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8002b7a:	2300      	movs	r3, #0
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3710      	adds	r7, #16
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d120      	bne.n	8002be0 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f04f 32ff 	mov.w	r2, #4294967295
 8002ba6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002ba8:	f7fd ff38 	bl	8000a1c <HAL_GetTick>
 8002bac:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002bae:	e00d      	b.n	8002bcc <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002bb0:	f7fd ff34 	bl	8000a1c <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bbe:	d905      	bls.n	8002bcc <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2203      	movs	r2, #3
 8002bc8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d102      	bne.n	8002be0 <RTC_EnterInitMode+0x5c>
 8002bda:	7bfb      	ldrb	r3, [r7, #15]
 8002bdc:	2b03      	cmp	r3, #3
 8002bde:	d1e7      	bne.n	8002bb0 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8002be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3710      	adds	r7, #16
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
	...

08002bec <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8002bf8:	4b1a      	ldr	r3, [pc, #104]	; (8002c64 <RTC_ExitInitMode+0x78>)
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	4a19      	ldr	r2, [pc, #100]	; (8002c64 <RTC_ExitInitMode+0x78>)
 8002bfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c02:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8002c04:	4b17      	ldr	r3, [pc, #92]	; (8002c64 <RTC_ExitInitMode+0x78>)
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f003 0320 	and.w	r3, r3, #32
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d10c      	bne.n	8002c2a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f7ff ff91 	bl	8002b38 <HAL_RTC_WaitForSynchro>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d01e      	beq.n	8002c5a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2203      	movs	r2, #3
 8002c20:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	73fb      	strb	r3, [r7, #15]
 8002c28:	e017      	b.n	8002c5a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002c2a:	4b0e      	ldr	r3, [pc, #56]	; (8002c64 <RTC_ExitInitMode+0x78>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	4a0d      	ldr	r2, [pc, #52]	; (8002c64 <RTC_ExitInitMode+0x78>)
 8002c30:	f023 0320 	bic.w	r3, r3, #32
 8002c34:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f7ff ff7e 	bl	8002b38 <HAL_RTC_WaitForSynchro>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d005      	beq.n	8002c4e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2203      	movs	r2, #3
 8002c46:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002c4e:	4b05      	ldr	r3, [pc, #20]	; (8002c64 <RTC_ExitInitMode+0x78>)
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	4a04      	ldr	r2, [pc, #16]	; (8002c64 <RTC_ExitInitMode+0x78>)
 8002c54:	f043 0320 	orr.w	r3, r3, #32
 8002c58:	6093      	str	r3, [r2, #8]
  }

  return status;
 8002c5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3710      	adds	r7, #16
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	40002800 	.word	0x40002800

08002c68 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b085      	sub	sp, #20
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	4603      	mov	r3, r0
 8002c70:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002c72:	2300      	movs	r3, #0
 8002c74:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8002c76:	79fb      	ldrb	r3, [r7, #7]
 8002c78:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8002c7a:	e005      	b.n	8002c88 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	3301      	adds	r3, #1
 8002c80:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8002c82:	7afb      	ldrb	r3, [r7, #11]
 8002c84:	3b0a      	subs	r3, #10
 8002c86:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8002c88:	7afb      	ldrb	r3, [r7, #11]
 8002c8a:	2b09      	cmp	r3, #9
 8002c8c:	d8f6      	bhi.n	8002c7c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	011b      	lsls	r3, r3, #4
 8002c94:	b2da      	uxtb	r2, r3
 8002c96:	7afb      	ldrb	r3, [r7, #11]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	b2db      	uxtb	r3, r3
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3714      	adds	r7, #20
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8002cb0:	4b0f      	ldr	r3, [pc, #60]	; (8002cf0 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 8002cb2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002cb6:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d00b      	beq.n	8002cde <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	b2da      	uxtb	r2, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002cd6:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f000 f80b 	bl	8002cf4 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8002ce6:	bf00      	nop
 8002ce8:	3708      	adds	r7, #8
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	40010400 	.word	0x40010400

08002cf4 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8002cfc:	bf00      	nop
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <__errno>:
 8002d08:	4b01      	ldr	r3, [pc, #4]	; (8002d10 <__errno+0x8>)
 8002d0a:	6818      	ldr	r0, [r3, #0]
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	2000002c 	.word	0x2000002c

08002d14 <__libc_init_array>:
 8002d14:	b570      	push	{r4, r5, r6, lr}
 8002d16:	4d0d      	ldr	r5, [pc, #52]	; (8002d4c <__libc_init_array+0x38>)
 8002d18:	4c0d      	ldr	r4, [pc, #52]	; (8002d50 <__libc_init_array+0x3c>)
 8002d1a:	1b64      	subs	r4, r4, r5
 8002d1c:	10a4      	asrs	r4, r4, #2
 8002d1e:	2600      	movs	r6, #0
 8002d20:	42a6      	cmp	r6, r4
 8002d22:	d109      	bne.n	8002d38 <__libc_init_array+0x24>
 8002d24:	4d0b      	ldr	r5, [pc, #44]	; (8002d54 <__libc_init_array+0x40>)
 8002d26:	4c0c      	ldr	r4, [pc, #48]	; (8002d58 <__libc_init_array+0x44>)
 8002d28:	f000 f8da 	bl	8002ee0 <_init>
 8002d2c:	1b64      	subs	r4, r4, r5
 8002d2e:	10a4      	asrs	r4, r4, #2
 8002d30:	2600      	movs	r6, #0
 8002d32:	42a6      	cmp	r6, r4
 8002d34:	d105      	bne.n	8002d42 <__libc_init_array+0x2e>
 8002d36:	bd70      	pop	{r4, r5, r6, pc}
 8002d38:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d3c:	4798      	blx	r3
 8002d3e:	3601      	adds	r6, #1
 8002d40:	e7ee      	b.n	8002d20 <__libc_init_array+0xc>
 8002d42:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d46:	4798      	blx	r3
 8002d48:	3601      	adds	r6, #1
 8002d4a:	e7f2      	b.n	8002d32 <__libc_init_array+0x1e>
 8002d4c:	08002f44 	.word	0x08002f44
 8002d50:	08002f44 	.word	0x08002f44
 8002d54:	08002f44 	.word	0x08002f44
 8002d58:	08002f48 	.word	0x08002f48

08002d5c <malloc>:
 8002d5c:	4b02      	ldr	r3, [pc, #8]	; (8002d68 <malloc+0xc>)
 8002d5e:	4601      	mov	r1, r0
 8002d60:	6818      	ldr	r0, [r3, #0]
 8002d62:	f000 b82b 	b.w	8002dbc <_malloc_r>
 8002d66:	bf00      	nop
 8002d68:	2000002c 	.word	0x2000002c

08002d6c <memset>:
 8002d6c:	4402      	add	r2, r0
 8002d6e:	4603      	mov	r3, r0
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d100      	bne.n	8002d76 <memset+0xa>
 8002d74:	4770      	bx	lr
 8002d76:	f803 1b01 	strb.w	r1, [r3], #1
 8002d7a:	e7f9      	b.n	8002d70 <memset+0x4>

08002d7c <sbrk_aligned>:
 8002d7c:	b570      	push	{r4, r5, r6, lr}
 8002d7e:	4e0e      	ldr	r6, [pc, #56]	; (8002db8 <sbrk_aligned+0x3c>)
 8002d80:	460c      	mov	r4, r1
 8002d82:	6831      	ldr	r1, [r6, #0]
 8002d84:	4605      	mov	r5, r0
 8002d86:	b911      	cbnz	r1, 8002d8e <sbrk_aligned+0x12>
 8002d88:	f000 f88c 	bl	8002ea4 <_sbrk_r>
 8002d8c:	6030      	str	r0, [r6, #0]
 8002d8e:	4621      	mov	r1, r4
 8002d90:	4628      	mov	r0, r5
 8002d92:	f000 f887 	bl	8002ea4 <_sbrk_r>
 8002d96:	1c43      	adds	r3, r0, #1
 8002d98:	d00a      	beq.n	8002db0 <sbrk_aligned+0x34>
 8002d9a:	1cc4      	adds	r4, r0, #3
 8002d9c:	f024 0403 	bic.w	r4, r4, #3
 8002da0:	42a0      	cmp	r0, r4
 8002da2:	d007      	beq.n	8002db4 <sbrk_aligned+0x38>
 8002da4:	1a21      	subs	r1, r4, r0
 8002da6:	4628      	mov	r0, r5
 8002da8:	f000 f87c 	bl	8002ea4 <_sbrk_r>
 8002dac:	3001      	adds	r0, #1
 8002dae:	d101      	bne.n	8002db4 <sbrk_aligned+0x38>
 8002db0:	f04f 34ff 	mov.w	r4, #4294967295
 8002db4:	4620      	mov	r0, r4
 8002db6:	bd70      	pop	{r4, r5, r6, pc}
 8002db8:	2000010c 	.word	0x2000010c

08002dbc <_malloc_r>:
 8002dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002dc0:	1ccd      	adds	r5, r1, #3
 8002dc2:	f025 0503 	bic.w	r5, r5, #3
 8002dc6:	3508      	adds	r5, #8
 8002dc8:	2d0c      	cmp	r5, #12
 8002dca:	bf38      	it	cc
 8002dcc:	250c      	movcc	r5, #12
 8002dce:	2d00      	cmp	r5, #0
 8002dd0:	4607      	mov	r7, r0
 8002dd2:	db01      	blt.n	8002dd8 <_malloc_r+0x1c>
 8002dd4:	42a9      	cmp	r1, r5
 8002dd6:	d905      	bls.n	8002de4 <_malloc_r+0x28>
 8002dd8:	230c      	movs	r3, #12
 8002dda:	603b      	str	r3, [r7, #0]
 8002ddc:	2600      	movs	r6, #0
 8002dde:	4630      	mov	r0, r6
 8002de0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002de4:	4e2e      	ldr	r6, [pc, #184]	; (8002ea0 <_malloc_r+0xe4>)
 8002de6:	f000 f86d 	bl	8002ec4 <__malloc_lock>
 8002dea:	6833      	ldr	r3, [r6, #0]
 8002dec:	461c      	mov	r4, r3
 8002dee:	bb34      	cbnz	r4, 8002e3e <_malloc_r+0x82>
 8002df0:	4629      	mov	r1, r5
 8002df2:	4638      	mov	r0, r7
 8002df4:	f7ff ffc2 	bl	8002d7c <sbrk_aligned>
 8002df8:	1c43      	adds	r3, r0, #1
 8002dfa:	4604      	mov	r4, r0
 8002dfc:	d14d      	bne.n	8002e9a <_malloc_r+0xde>
 8002dfe:	6834      	ldr	r4, [r6, #0]
 8002e00:	4626      	mov	r6, r4
 8002e02:	2e00      	cmp	r6, #0
 8002e04:	d140      	bne.n	8002e88 <_malloc_r+0xcc>
 8002e06:	6823      	ldr	r3, [r4, #0]
 8002e08:	4631      	mov	r1, r6
 8002e0a:	4638      	mov	r0, r7
 8002e0c:	eb04 0803 	add.w	r8, r4, r3
 8002e10:	f000 f848 	bl	8002ea4 <_sbrk_r>
 8002e14:	4580      	cmp	r8, r0
 8002e16:	d13a      	bne.n	8002e8e <_malloc_r+0xd2>
 8002e18:	6821      	ldr	r1, [r4, #0]
 8002e1a:	3503      	adds	r5, #3
 8002e1c:	1a6d      	subs	r5, r5, r1
 8002e1e:	f025 0503 	bic.w	r5, r5, #3
 8002e22:	3508      	adds	r5, #8
 8002e24:	2d0c      	cmp	r5, #12
 8002e26:	bf38      	it	cc
 8002e28:	250c      	movcc	r5, #12
 8002e2a:	4629      	mov	r1, r5
 8002e2c:	4638      	mov	r0, r7
 8002e2e:	f7ff ffa5 	bl	8002d7c <sbrk_aligned>
 8002e32:	3001      	adds	r0, #1
 8002e34:	d02b      	beq.n	8002e8e <_malloc_r+0xd2>
 8002e36:	6823      	ldr	r3, [r4, #0]
 8002e38:	442b      	add	r3, r5
 8002e3a:	6023      	str	r3, [r4, #0]
 8002e3c:	e00e      	b.n	8002e5c <_malloc_r+0xa0>
 8002e3e:	6822      	ldr	r2, [r4, #0]
 8002e40:	1b52      	subs	r2, r2, r5
 8002e42:	d41e      	bmi.n	8002e82 <_malloc_r+0xc6>
 8002e44:	2a0b      	cmp	r2, #11
 8002e46:	d916      	bls.n	8002e76 <_malloc_r+0xba>
 8002e48:	1961      	adds	r1, r4, r5
 8002e4a:	42a3      	cmp	r3, r4
 8002e4c:	6025      	str	r5, [r4, #0]
 8002e4e:	bf18      	it	ne
 8002e50:	6059      	strne	r1, [r3, #4]
 8002e52:	6863      	ldr	r3, [r4, #4]
 8002e54:	bf08      	it	eq
 8002e56:	6031      	streq	r1, [r6, #0]
 8002e58:	5162      	str	r2, [r4, r5]
 8002e5a:	604b      	str	r3, [r1, #4]
 8002e5c:	4638      	mov	r0, r7
 8002e5e:	f104 060b 	add.w	r6, r4, #11
 8002e62:	f000 f835 	bl	8002ed0 <__malloc_unlock>
 8002e66:	f026 0607 	bic.w	r6, r6, #7
 8002e6a:	1d23      	adds	r3, r4, #4
 8002e6c:	1af2      	subs	r2, r6, r3
 8002e6e:	d0b6      	beq.n	8002dde <_malloc_r+0x22>
 8002e70:	1b9b      	subs	r3, r3, r6
 8002e72:	50a3      	str	r3, [r4, r2]
 8002e74:	e7b3      	b.n	8002dde <_malloc_r+0x22>
 8002e76:	6862      	ldr	r2, [r4, #4]
 8002e78:	42a3      	cmp	r3, r4
 8002e7a:	bf0c      	ite	eq
 8002e7c:	6032      	streq	r2, [r6, #0]
 8002e7e:	605a      	strne	r2, [r3, #4]
 8002e80:	e7ec      	b.n	8002e5c <_malloc_r+0xa0>
 8002e82:	4623      	mov	r3, r4
 8002e84:	6864      	ldr	r4, [r4, #4]
 8002e86:	e7b2      	b.n	8002dee <_malloc_r+0x32>
 8002e88:	4634      	mov	r4, r6
 8002e8a:	6876      	ldr	r6, [r6, #4]
 8002e8c:	e7b9      	b.n	8002e02 <_malloc_r+0x46>
 8002e8e:	230c      	movs	r3, #12
 8002e90:	603b      	str	r3, [r7, #0]
 8002e92:	4638      	mov	r0, r7
 8002e94:	f000 f81c 	bl	8002ed0 <__malloc_unlock>
 8002e98:	e7a1      	b.n	8002dde <_malloc_r+0x22>
 8002e9a:	6025      	str	r5, [r4, #0]
 8002e9c:	e7de      	b.n	8002e5c <_malloc_r+0xa0>
 8002e9e:	bf00      	nop
 8002ea0:	20000108 	.word	0x20000108

08002ea4 <_sbrk_r>:
 8002ea4:	b538      	push	{r3, r4, r5, lr}
 8002ea6:	4d06      	ldr	r5, [pc, #24]	; (8002ec0 <_sbrk_r+0x1c>)
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	4604      	mov	r4, r0
 8002eac:	4608      	mov	r0, r1
 8002eae:	602b      	str	r3, [r5, #0]
 8002eb0:	f7fd fcda 	bl	8000868 <_sbrk>
 8002eb4:	1c43      	adds	r3, r0, #1
 8002eb6:	d102      	bne.n	8002ebe <_sbrk_r+0x1a>
 8002eb8:	682b      	ldr	r3, [r5, #0]
 8002eba:	b103      	cbz	r3, 8002ebe <_sbrk_r+0x1a>
 8002ebc:	6023      	str	r3, [r4, #0]
 8002ebe:	bd38      	pop	{r3, r4, r5, pc}
 8002ec0:	20000110 	.word	0x20000110

08002ec4 <__malloc_lock>:
 8002ec4:	4801      	ldr	r0, [pc, #4]	; (8002ecc <__malloc_lock+0x8>)
 8002ec6:	f000 b809 	b.w	8002edc <__retarget_lock_acquire_recursive>
 8002eca:	bf00      	nop
 8002ecc:	20000114 	.word	0x20000114

08002ed0 <__malloc_unlock>:
 8002ed0:	4801      	ldr	r0, [pc, #4]	; (8002ed8 <__malloc_unlock+0x8>)
 8002ed2:	f000 b804 	b.w	8002ede <__retarget_lock_release_recursive>
 8002ed6:	bf00      	nop
 8002ed8:	20000114 	.word	0x20000114

08002edc <__retarget_lock_acquire_recursive>:
 8002edc:	4770      	bx	lr

08002ede <__retarget_lock_release_recursive>:
 8002ede:	4770      	bx	lr

08002ee0 <_init>:
 8002ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ee2:	bf00      	nop
 8002ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ee6:	bc08      	pop	{r3}
 8002ee8:	469e      	mov	lr, r3
 8002eea:	4770      	bx	lr

08002eec <_fini>:
 8002eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eee:	bf00      	nop
 8002ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ef2:	bc08      	pop	{r3}
 8002ef4:	469e      	mov	lr, r3
 8002ef6:	4770      	bx	lr
